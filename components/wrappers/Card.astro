---
import { hue, scheme } from '@variants'
import type { HTMLAttributes } from 'astro/types'
import { cva, type VariantProps } from 'cva'

export type CardProps = Props
type Props = VariantProps<typeof variant> & {
  href?: HTMLAttributes<'a'>['href']
}

const variant = cva({
  base: 'box-border gap-size5 mode-compact size-medium relative card flex flex-col rounded-size2 [&[href]_.image]:hover:opacity-75 transition',
  variants: {
    frame: {
      fill: '[&_.image]:rounded-size2',
      panel: '[&_.segment]:p-size5 !gap-0 overflow-hidden',
    },
    look: {
      surface:
        'bg-hue2 border border-hue6 [&[href]]:(hover:border-hue7 hover:bg-hue3 active:border-hue8 active:bg-hue4)',
      soft: 'bg-hue2 [&[href]]:(hover:bg-hue3 active:bg-hue4)',
      outline:
        'bg-transparent border border-hue6 [&[href]]:(hover:border-hue7 active:border-hue8)',
      ghost: 'bg-transparent [&[href]]:(hover:bg-hue2 active:bg-hue3)',
    },
    ratio: {
      landscape: 'aspect-4/3 object-cover',
      square: 'aspect-square object-cover',
      portrait: 'aspect-3/4 object-cover',
    },
    scheme: scheme,
    hue: hue,
  },
})

const { href } = Astro.props
// const slot = await Astro.slots.render('default')
---

{
  href ? (
    <a
      class={variant(Astro.props)}
      href={href}
    >
      <slot />
    </a>
  ) : (
    <div class={variant(Astro.props)}>
      <slot />
    </div>
  )
}
