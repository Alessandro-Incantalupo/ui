---
import { getEntry, type CollectionEntry } from 'astro:content'
import merge from 'deepmerge'
import { getEntryByPath, getRouteByEntry } from '../../utils'
import RenderCard, { type RenderCardProps } from './CardRenderer.astro'

interface Props {
  // Collections
  posts?: CollectionEntry<'posts'>[] | null
  reviews?: CollectionEntry<'reviews'>[] | null
  services?: CollectionEntry<'services'>[] | null
  // Static cards
  features?: RenderCardProps[] | null
  highlights?: RenderCardProps[] | null
  offers?: RenderCardProps[] | null
}

const cardsConfig = await getEntry('settings', 'cards')

const buildCardFromEntry = (entry: any): RenderCardProps => ({
  href: getRouteByEntry(entry),
  ...entry.data,
})

const getCardProps = async (item: any): Promise<any> => {
  if (typeof item === 'string') item = await getEntryByPath(item)
  if (typeof item === 'object' && 'slug' in item)
    return buildCardFromEntry(item)
  else return item
}

let cards = []
for (const [key, value] of Object.entries(Astro.props)) {
  if (!value) continue
  const config = cardsConfig?.data[key]
  const mergedCards = value?.map(async (item: any) => {
    const props: any = await getCardProps(item)
    let merged = { ...props, ...config }
    if (props && config) merged = merge(props, config)
    return merged
  })
  const results = await Promise.all(mergedCards)
  cards.push(...results)
}
cards = cards.flat()
---

{cards.map((card: any) => <RenderCard {...card} />)}
