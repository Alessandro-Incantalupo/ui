---
export interface Props {
  deck?: 'carousel' | 'grid' | 'masonry' | 'row' | 'panels' | 'bento'
  frame?: 'fill' | 'panel' | 'screen'
  class?: string
}

const { deck = 'row', frame = 'fill', class: className } = Astro.props
const slot = await Astro.slots.render('default')
---

{
  slot?.trim().length > 0 && (
    <div class:list={['deck', deck, frame, className]}>
      <Fragment set:html={slot} />
    </div>
  )
}

<style is:global>
  @custom-media --lg (min-width: 1024px);
  @custom-media --sm (min-width: 768px);

  .deck {
    position: relative;
    padding: 0 var(--gutter-padding);
    width: 100%;

    & > * {
      flex-shrink: 0;
      flex-grow: 0;
      margin: 0 calc(-1 * var(--flow-self4));
    }

    &:where(.row) {
      display: grid;
      row-gap: var(--flow4);

      @media (--lg) {
        grid-auto-flow: column;
        grid-auto-columns: 4fr 1fr;

        > * {
          &:nth-child(2) {
            grid-column-start: 3;
          }
          &:nth-child(3) {
            grid-column-start: 5;
          }
          &:nth-child(4) {
            grid-column-start: 7;
          }
        }
      }
    }

    &:where(.carousel) {
      position: relative;
      display: flex;
      scroll-snap-type: x mandatory;
      overflow-x: auto;
      scroll-behavior: smooth;
      flex-direction: row;
      padding: 0 var(--gutter-padding);
      width: 100%;

      & > * {
        flex-shrink: 0;
        flex-grow: 0;
        width: 400px;
        scroll-snap-align: center;
      }
    }

    &:where(.grid) {
      display: grid;
      width: 100%;
      gap: calc(var(--gutter-padding) / 2);
      grid-template-columns: repeat(4, 4fr 1fr);
    }

    &:where(.masonry) {
      flex-direction: column;
      align-items: flex-start;
    }

    &:where(.panels) {
      display: grid;
      grid-template-columns: 1fr;

      @media (--lg) {
        grid-template-columns: 1fr 1fr;
      }
    }

    &:where(.bento) {
      display: grid;
      grid-template-columns: 1fr;

      @media (--lg) {
        grid-template-columns: 1fr 1fr 1fr;

        & > *:nth-child(2n) {
          grid-column-start: span 2;
        }
      }
    }

    &:where(.fill) {
      padding: 0 var(--gutter);
    }

    &:where(.panel) {
      padding: 0 calc(var(--gutter) / 2);
    }
  }
</style>
