---
interface Props {
  collapsible?: {
    heading?: string
    text: string
  }
  class?: string
}

const { collapsible, class: className } = Astro.props

const id = 'collapsible' + collapsible?.heading
---

{
  typeof collapsible === 'object' && (
    <div class:list={className}>
      <input
        id={id}
        type="checkbox"
      />
      <label for={id}>
        <h3>{collapsible.heading}</h3>
        <i />
      </label>
      <p>{collapsible.text}</p>
    </div>
  )
}

<style>
  div {
    display: flex;
    flex-direction: column;

    & > label {
      margin-right: var(--flow5);
      display: flex;
      align-items: center;
      justify-content: space-between;

      &:checked {
        --un-icon: url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 12h14'/%3E%3C/svg%3E");
        -webkit-mask: var(--un-icon) no-repeat;
        mask: var(--un-icon) no-repeat;
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
        background-color: currentColor;
        color: inherit;
        width: 1em;
        height: 1em;
      }
    }

    i {
      --un-icon: url("data:image/svg+xml;utf8,%3Csvg viewBox='0 0 24 24' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 5v14m-7-7h14'/%3E%3C/svg%3E");
      -webkit-mask: var(--un-icon) no-repeat;
      mask: var(--un-icon) no-repeat;
      -webkit-mask-size: 100% 100%;
      mask-size: 100% 100%;
      background-color: currentColor;
      color: inherit;
      width: 1em;
      height: 1em;
    }

    div > p {
      padding-top: var(--flow2);
      color: var(--un-preset-theme-textColor-primary);
      display: none;
    }

    div > p:checked {
      display: flex;
    }
  }
</style>
