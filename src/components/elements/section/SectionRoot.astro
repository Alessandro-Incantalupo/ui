---
export interface Props {
  theme?: string
  layout?: 'left' | 'center' | 'split' | 'wide'
  frame?: 'fill' | 'panel' | 'screen'
  scale?: number
  class?: string
}

const {
  theme,
  layout = 'left',
  frame = 'fill',
  scale,
  class: className,
} = Astro.props

const slot = await Astro.slots.render('default')
---

{
  slot?.trim().length > 0 && (
    <section class:list={['section', theme, layout, frame, className]}>
      <Fragment set:html={slot} />
    </section>
  )
}

<style is:global>
  section {
    container: section / inline-size;
    position: relative;
    overflow-x: hidden;
    padding-top: var(--flow6);
    padding-bottom: var(--flow6);
    row-gap: var(--flow5);
    background: var(--section-bg);
    border-color: var(--section-ring);

    &:first-child {
      margin-top: 0;
      padding-top: var(--flow5);
    }

    /* &:last-child {
      padding-bottom: var(--flow5);
    } */

    &,
    &:where(.left) {
      display: flex;
      flex-direction: column;
    }

    &:where(.split) {
      display: grid;
      align-items: center;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;

        /* NEEDDS GLOBAL */
        &:nth-child(even) {
          & > *:first-child {
            order: 2;
          }
        }
      }
    }

    &:where(.center) {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
    }

    &:where(.wide) {
      display: flex;
      flex-direction: column;
    }

    &:where(.panel) {
      padding: var(--flow6) calc(var(--gutter) / 2);
      border-width: var(--borderWidth);
    }

    &:where(.screen) {
      min-height: 100vh;
    }
  }
</style>
