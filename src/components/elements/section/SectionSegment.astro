---
export interface Props {
  layout: 'left' | 'center' | 'split' | 'wide'
  area: 'default' | 'panel'
  class?: string
}

const { layout = 'left', area = 'default', class: className } = Astro.props
const slot = await Astro.slots.render('default')
---

{
  slot?.trim().length > 0 && (
    <div class:list={['segment', layout, area, className]}>
      <Fragment set:html={slot} />
    </div>
  )
}

<style>
  .segment {
    display: flex;
    flex-direction: column;
    position: relative;
    z-index: 10;
    gap: var(--flow4);
    column-gap: var(--gutter);
    container: segment / inline-size;
    width: 100%;

    &:where(.left) {
      align-items: flex-start;
      text-align: left;
    }

    &:where(.center) {
      align-items: center;
      text-align: center;
    }
    &:where(.split) {
      align-items: flex-start;
      text-align: left;
    }

    &:where(.wide) {
      align-items: flex-start;
      text-align: left;

      @media (min-width: 1024px) {
        align-items: center;
        justify-content: space-between;
        flex-direction: row;
      }
    }
    /* &:where(.area-panel:not(:has(.area-panel))) {
      padding: var(--gutter);
    } */
    &:where(.panel) {
      padding: var(--gutter);
    }
  }
</style>
