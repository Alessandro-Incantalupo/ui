---
import type { ComponentProps } from 'astro/types'
import getSlot from 'src/utils/getSlot'
import { Card } from '.'

interface Props extends ComponentProps<typeof Card> {}

const { href, area, ratio, class: className } = Astro.props
const slot = await getSlot(Astro)
---

{
  slot && href && (
    <a
      class:list={['card flow-compact', 'area-' + area, ratio, className]}
      href={href}
    >
      <Fragment set:html={slot} />
    </a>
  )
}
{
  slot && !href && (
    <div class:list={['card flow-compact', 'area-' + area, ratio, className]}>
      <Fragment set:html={slot} />
    </div>
  )
}

<style>
  div,
  a {
    container: cardRoot / inline-size;
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--rounded2);
    background-color: var(--bg);
    border-color: var(--ring);
    gap: var(--flow-self4);
    text-align: left;

    & > img {
      opacity: 0.75;
    }
    &:where(.soft) {
    }
    &:where(.ghost) {
      background-color: transparent;
    }
    &:where(.landscape) {
      aspect-ratio: 4/3;
      object-fit: cover;
    }
    &:where(.square) {
      aspect-ratio: 1/1;
      object-fit: cover;
    }
    &:where(.portrait) {
      aspect-ratio: 3/4;
      object-fit: cover;
    }
    &:where(.area-panel) {
      border-width: var(--borderWidth);
      gap: 0;
    }
  }

  a {
    transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);

    &:hover {
      background-color: var(--bg-hover);
      border-color: var(--ring-hover);

      :global(img) {
        transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);
        opacity: 0.75;
      }
    }
    &:active {
      background-color: var(--bg-active);
    }
  }
</style>
