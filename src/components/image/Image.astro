---
import type { HTMLAttributes } from 'astro/types'
import { buildProps, unslugify, type BuildProps } from '../../utils'

interface Base {
  image?: string | null
  alt?: string | null
  position?: 'background' | null
  frame?: 'fill' | 'panel' | 'screen' | null
  loading?: HTMLAttributes<'img'>['loading']
  sizes?: {
    base: string
    sm?: string
    md?: string
    lg?: string
    xl?: string
    '2xl'?: string
  }
  class?: string | null
}

type Props = BuildProps<Base, 'image'>
const props = buildProps(Astro, 'image')

// interface Props {
//   image?: string | null | Omit<Props, '_image'>
//   _image?: Props['image']
//   alt?: string
//   position?: 'background' | null
//   frame?: 'fill' | 'panel' | 'screen' | null
//   loading?: HTMLAttributes<'img'>['loading']
// }

// const variant = cva({
//   base: 'image',
//   variants: {
//     position: {
//       relative: 'w-full h-auto relative',
//       background: 'object-cover absolute inset-0 !h-full !w-full',
//     },
//     ratio: {
//       landscape: 'aspect-4/3 object-cover',
//       square: 'aspect-square object-cover',
//       portrait: 'aspect-3/4 object-cover',
//     },
//   },
//   defaultVariants: {
//     position: 'relative',
//   },
// })

const {
  position,
  frame,
  image,
  alt = '',
  loading = 'lazy',
  sizes = {
    base: '100vw',
  },
  class: className,
} = props

// function getSrc() {
//   if (src?.startsWith('http')) return src
//   // TODO: add eager import
//   const images = import.meta.glob('/src/assets/**/*.{jpeg,jpg,png,webp,gif}', {
//     eager: true,
//   })
//   const path = ('/src/assets/' + src).replace('//', '/')
//   const image = images[path]
//   if (!image) console.warn(`Image not found: ${path}`)
//   else return image
// }

function getAlt(): string {
  if (alt) return alt
  const filename = image?.split('/').pop()
  const slug = filename && filename.split('.')[0]
  const unslugged = slug && unslugify(slug)
  return unslugged || ''
}

function getSizes() {
  const mapped = Object.entries(sizes).map(([key, value]) => {
    if (key === 'base') return value
    if (key === 'sm') return `(min-width: 640px) ${value}`
    if (key === 'md') return `(min-width: 768px) ${value}`
    if (key === 'lg') return `(min-width: 1024px) ${value}`
    if (key === 'xl') return `(min-width: 1280px) ${value}`
    if (key === '2xl') return `(min-width: 1536px) ${value}`
  })
  const joined = mapped.join(', ')
  return joined
}
---

{
  image && (
    <img
      src={image}
      alt={getAlt()}
      sizes={getSizes()}
      loading={loading}
      class:list={['image', position, frame, className]}
    />
  )
}
<style>
  .mask {
    -webkit-mask-image: linear-gradient(to top, transparent 0%, black 30%);
    mask-image: linear-gradient(to top, transparent 0%, black 30%);
  }
  .mask-lg {
    -webkit-mask-image: linear-gradient(to top, transparent 0%, black 100%);
    mask-image: linear-gradient(to top, transparent 0%, black 100%);
  }

  img {
    display: block;
    transition: var(--transition);
    border-radius: var(--border-radius-1);
    width: 100%;
    height: auto;
    object-fit: cover;

    &:where(.background) {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      order: 1;

      /* TODO manier fixen zodat dit met custom classes kan */
      opacity: 50%;
      border-radius: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &:where(.cover) {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &:where(.panel) {
      height: 100%;
      object-fit: cover;
    }
  }
</style>
