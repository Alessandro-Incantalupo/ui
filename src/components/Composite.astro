---
import type { ComponentProps } from 'astro/types'
import { buildProps, type BuildProps } from '../utils'
import Action from './Action.astro'
import Display from './Display.astro'
import Tag from './Tag.astro'

interface Base
  extends ComponentProps<typeof Display>,
    ComponentProps<typeof Action> {
  density?: 'compact' | null
  layout?: 'split' | 'stack' | null
  align?: 'start' | 'center' | 'stretch' | null
}

type Props = BuildProps<Base, 'composite'>
const props = buildProps(Astro, 'composite')

const { as, class: className, ...rest } = props
---

<Tag
  {as}
  class={className}
  {...rest}
>
  <Display {...rest} />
  <Action {...rest} />
  <slot />
</Tag>

<style is:global>
  .composite {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--spacing-4);
    z-index: 1;
    width: 100%;

    &.center {
      align-items: center;
    }

    &:is(.split .center) {
      align-items: flex-start;
    }

    &:is(.card &) {
      height: 100%;
    }

    &.panel {
      padding: var(--gutter);
    }

    &.panel.compact {
      gap: var(--spacing-4);
      padding: var(--spacing-4);
    }

    &.stretch {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
      /* @media (min-width: 1024px) {
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
      } */
    }

    &:where(.split .start) {
      @media (min-width: 1024px) {
        position: sticky;
        top: var(--spacing-5);
      }
    }
  }
</style>
