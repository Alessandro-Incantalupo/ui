---
import type { ComponentProps } from 'astro/types'
import { getEntry } from 'astro:content'
import merge from 'deepmerge'
import { SectionRoot } from '.'
import {
  buildProps,
  getReference,
  withDefaults,
  type BuildProps,
  type GetReference,
} from '../../utils'
import { Cards } from '../cards'
import { Composite } from '../composite'
import { Gallery } from '../gallery'
import { Image } from '../image'
import { Prose } from '../prose'

interface Base
  extends GetReference,
    ComponentProps<typeof SectionRoot>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'>,
    Pick<ComponentProps<typeof Cards>, 'cards' | '_cards'> {
  // Pick<ComponentProps<typeof Gallery>, 'gallery' | '_gallery'>,
  // Pick<ComponentProps<typeof Prose>, 'prose' | '_prose'>,
  // ComponentProps<typeof Prose>,
}

type Props = BuildProps<Base, 'section'>
const props = buildProps(Astro, 'section')

const reference = getReference(props)
const entry = reference && (await getEntry(reference))
const entryWithDefaults = entry && (await withDefaults(entry))
const entryAndProps = merge(entryWithDefaults?.data, props)

const {
  cards,
  _cards,
  image,
  _image,
  class: className,
  ...restProps
} = entryAndProps
---

<SectionRoot
  class={className}
  {...restProps}
>
  <Composite
    {...props}
    align={props.layout === 'split' ? 'start' : props.align}
  />
  <Image
    {image}
    {_image}
  />
  <!-- <Gallery
    {gallery}
    {_gallery}
  /> -->
  <Cards
    {cards}
    {_cards}
  />
  <!-- <Prose render={render || entry?.render} /> -->
  <slot />
</SectionRoot>
