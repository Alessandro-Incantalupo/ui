---
import type { ComponentProps } from 'astro/types'
import { getEntry } from 'astro:content'
import merge from 'deepmerge'
import { SectionRoot } from '.'
import { getReference, withDefaults, type GetReference } from '../../utils'
import { Cards } from '../cards'
import { Composite } from '../composite'
import { Gallery } from '../gallery'
import { Image } from '../image'
import { Media } from '../media'
import { Prose } from '../prose'

interface Props
  extends GetReference,
    ComponentProps<typeof SectionRoot>,
    ComponentProps<typeof Gallery>,
    // ComponentProps<typeof Prose>,
    ComponentProps<typeof Media> {
  _cards?: ComponentProps<typeof Cards>
  cards?: ComponentProps<typeof Cards>['cards']
  _image?: ComponentProps<typeof Image>
  image?: ComponentProps<typeof Image>
}

const reference = getReference(Astro.props)
const entry = reference && (await getEntry(reference))
const entryWithDefaults = entry && (await withDefaults(entry))
const entryAndProps = merge(entryWithDefaults?.data, Astro.props)

const { class: className, ...props } = entryAndProps
---

<SectionRoot
  class={className}
  {...props}
>
  <Composite
    {...props}
    align={props.layout === 'split' ? 'start' : props.align}
  />
  <Image {...props.image} />
  <Gallery
    {...props}
    gallery={props.images}
  />
  <Cards
    {...props._cards}
    cards={props.cards}
  />
  <Prose render={render || entry?.render} />
  <slot />
</SectionRoot>
