---
import type { ComponentProps } from 'astro/types'
import {
  getEntry,
  type CollectionEntry,
  type ContentCollectionKey,
} from 'astro:content'
import { Buttons } from 'src/components/buttons'
import { Form } from 'src/components/form'
import { Image } from 'src/components/image'
import { Writeup } from 'src/components/writeup'
import { SectionRoot, SectionSegment } from '.'

interface Props
  extends ComponentProps<typeof SectionRoot>,
    ComponentProps<typeof SectionSegment>,
    ComponentProps<typeof Writeup>,
    ComponentProps<typeof Buttons> {
  image?: ComponentProps<typeof Image>
  reference?: {
    collection: ContentCollectionKey
    slug: CollectionEntry<ContentCollectionKey>['slug']
  }
  collection?: ContentCollectionKey
  slug?: CollectionEntry<ContentCollectionKey>['slug']
}

let { collection, slug, reference, ...restProps } = Astro.props
const entry =
  reference &&
  (await getEntry({
    collection: collection || reference.collection,
    slug: slug || reference.slug,
  }))
const props = { ...entry?.data, ...restProps }
---

<SectionRoot {...props}>
  <SectionSegment {...props}>
    <Writeup {...props}>
      <slot name="writeup" />
    </Writeup>
    <Buttons {...props} />
    <!-- <ChannelGroup {...props} /> -->
    <slot name="segment" />
  </SectionSegment>
  <Image {...props.image} />
  <Form {...props} />
  <slot />
</SectionRoot>
