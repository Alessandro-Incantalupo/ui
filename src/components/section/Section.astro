---
import type { ComponentProps } from 'astro/types'
import {
  getEntry,
  type CollectionEntry,
  type ContentCollectionKey,
} from 'astro:content'
import { SectionRoot } from '.'
import { Composite } from '../composite'
import { Form } from '../form'
import { Gallery } from '../gallery'
import { Image } from '../image'
import { Prose } from '../prose'
import { Rating } from '../rating'

interface Props
  extends ComponentProps<typeof SectionRoot>,
    ComponentProps<typeof Composite>,
    ComponentProps<typeof Gallery>,
    ComponentProps<typeof Form>,
    ComponentProps<typeof Rating>,
    ComponentProps<typeof Prose> {
  image?: ComponentProps<typeof Image>
  reference?: {
    collection: ContentCollectionKey
    slug: CollectionEntry<ContentCollectionKey>['slug']
  }
  collection?: ContentCollectionKey
  slug?: CollectionEntry<ContentCollectionKey>['slug']
}

let { props } = Astro
const collection = props.collection || props.reference?.collection
const slug = props.slug || props.reference?.slug
const entry = collection && slug && (await getEntry({ collection, slug }))
props = { ...entry?.data, ...props }
---

<SectionRoot {...props}>
  <Composite
    {...props}
    align={props.layout === 'split' ? 'start' : props.align}
  />
  <Image {...props.image} />
  <Form {...props} />
  <Prose {...props} />
  <Gallery {...props} />
  <slot />
</SectionRoot>
