---
import { getSlot } from '../../utils'

interface Props {
  hue?: string | null
  scale?: 'small' | 'medium' | 'large' | null
  order?: 'reverse' | 'switch' | null
  scheme?: 'invert' | 'light' | 'dark' | null
  align?: 'start' | 'center' | 'stretch' | null
  layout?: 'split' | 'stack' | null
  frame?: 'fill' | 'panel' | 'screen' | null
  class?: string | null
}

const {
  hue,
  scale,
  order,
  scheme,
  align = 'start',
  layout = 'stack',
  frame = 'fill',
  class: className,
} = Astro.props

const slot = await getSlot(Astro)
---

{
  slot && (
    <section
      class:list={[
        'section',
        hue,
        scheme,
        align,
        layout,
        scale,
        frame,
        order,
        className,
      ]}
    >
      <Fragment set:html={slot} />
    </section>
  )
}

<style>
  section {
    position: relative;
    gap: var(--spacing-5);
    background: var(--base-1);
    padding: var(--spacing-5) var(--gutter);

    &:first-child {
      margin-top: 0;
      padding-top: var(--spacing-5);
    }

    &:where(.reverse) > :global(*:first-child) {
      order: 2;
    }

    &:where(.switch:nth-child(even)) > :global(*:first-child) {
      order: 2;
    }

    &:where(.stack) {
      display: flex;
      flex-direction: column;
    }

    &:where(.split) {
      display: grid;
      align-items: center;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;
      }
    }

    &:where(.start) {
      align-items: start;
    }

    &:where(.stretch) {
      align-items: stretch;
    }

    &:where(.center) {
      align-items: center;
    }

    &:where(.panel) {
      gap: 0;
      margin: var(--spacing-5) var(--gutter);
      border-width: var(--border-width);
      border-color: var(--border-color);
      border-radius: var(--radius);
      background: var(--background);
      padding: var(--spacing-5) var(--gutter);
      padding: 0;
    }

    &:where(.screen) {
      min-height: 100vh;
    }
  }
</style>
