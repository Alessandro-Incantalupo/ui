---
import type { HTMLAttributes, HTMLTag } from 'astro/types'
import { getSlot } from '../../utils'

interface Props extends Omit<HTMLAttributes<HTMLTag>, 'slot'> {
  scale?: 'small' | 'medium' | 'large'
  order?: 'reverse' | 'switch'
  scheme?: 'invert' | 'light' | 'dark'
  impact?: 'low' | 'medium' | 'high' | 'extreme'
  align?: 'start' | 'center' | 'stretch'
  layout?: 'split' | 'stack'
  frame?: 'fill' | 'panel' | 'screen'
  tag?: HTMLTag
}

const {
  scheme,
  order,
  scale,
  impact = 'medium',
  align = 'start',
  layout = 'stack',
  frame = 'fill',
  tag: Tag = 'div',
  class: className,
  ...restProps
} = Astro.props

const slot = await getSlot(Astro)
---

{
  slot && (
    <Tag
      class:list={[
        'section',
        scheme,
        align,
        layout,
        scale,
        frame,
        order,
        className,
      ]}
      {...restProps}
    >
      <Fragment set:html={slot} />
    </Tag>
  )
}

<style>
  :where(.section) {
    background: var(--background);
    container: section / inline-size;
    position: relative;
    overflow-x: hidden;
    gap: var(--spacing-5);
    padding: var(--spacing-5) var(--gutter);

    :global(&:first-child) {
      padding-top: var(--spacing-5);
      margin-top: 0;
    }

    /* :global(&:where(.switch:nth-child(even) > *:first-child)) {
      order: 2;
    } */
  }
  :global(.reverse > *:first-child) {
    order: 2;
  }

  :global(.switch:nth-child(even) > *:first-child) {
    order: 2;
  }

  :where(.stack) {
    display: flex;
    flex-direction: column;
  }

  :where(.split) {
    display: grid;
    align-items: center;

    @media (min-width: 1024px) {
      grid-auto-columns: 1fr;
      grid-auto-flow: column;

      /* NEEDDS GLOBAL */
      :global(&:nth-child(even) > *:first-child) {
        order: 2;
      }
    }
  }

  :where(.start) {
    align-items: start;
    text-align: left;
  }

  :where(.stretch) {
    align-items: stretch;
    text-align: left;
  }

  :where(.center) {
    align-items: center;
    text-align: center;
  }

  /* &:where(.frame-panel:not(:has(.frame-panel))) {
      margin: var(--spacing-5) var(--gutter);
      border-width: var(--borderWidth);
      border-radius: var(--rounded2);
      gap: 0;
      padding: 0;
    } */

  :where(.panel) {
    background: var(--background);
    border-color: var(--border-color);
    border-radius: var(--radius);
    border-width: var(--border-width);
    padding: var(--spacing-5) var(--gutter);
    margin: var(--spacing-5) var(--gutter);
    gap: 0;
    padding: 0;
  }

  :where(.screen) {
    min-height: 100vh;
  }

  /* &:where(.frame-screen) {
      min-height: 100vh;
    } */
</style>
