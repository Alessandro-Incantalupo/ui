---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { htmlElementAttributes } from 'html-element-attributes'

type Props<As extends HTMLTag> = Polymorphic<{ as: As }> & {
  hue?: any
  scale?: any
  look?: any
  order?: any
  scheme?: any
  align?: any
  layout?: any
  frame?: any
  density?: any
}

const {
  as: As = 'div',
  align,
  layout,
  hue,
  scheme,
  scale,
  look,
  order,
  frame,
  density,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = slot?.trim().length > 0

const attributes = Object.fromEntries(
  Object.entries(rest).filter(
    ([key]) =>
      (htmlElementAttributes['*'].includes(key) ||
        htmlElementAttributes[As]?.includes(key) ||
        key.startsWith('data-') ||
        key.startsWith('aria-')) &&
      key !== 'title'
  )
)
---

{
  hasContent && (
    <As
      class:list={[
        align,
        layout,
        hue,
        scheme,
        scale,
        look,
        order,
        frame,
        density,
      ]}
      {...attributes}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
