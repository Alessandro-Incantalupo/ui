---
import type { ComponentProps } from 'astro/types'
import { buildProps, type BuildProps } from '../utils'
import Channels from './Channels.astro'
import Icon from './Icon.astro'
import Rating from './Rating.astro'
import Socials from './Socials.astro'
import Specs from './Specs.astro'
import Tag from './Tag.astro'
import Writeup from './Writeup.astro'

interface Base
  extends Pick<ComponentProps<typeof Rating>, 'rating' | '_rating'>,
    Pick<ComponentProps<typeof Icon>, 'icon' | '_icon'>,
    ComponentProps<typeof Writeup>,
    Pick<ComponentProps<typeof Specs>, 'specs' | '_specs'>,
    Pick<ComponentProps<typeof Channels>, 'channels' | '_channels'>,
    Pick<ComponentProps<typeof Socials>, 'socials' | '_socials'> {
  density?: 'compact' | null
  align?: 'start' | 'center' | 'stretch' | null
}

type Props = BuildProps<Base, 'display'>
const props = buildProps(Astro, 'display')

const {
  align,
  rating,
  _rating,
  icon,
  _icon,
  tagline,
  _tagline,
  title,
  _title,
  description,
  _description,
  writeup,
  _writeup,
  specs,
  _specs,
  channels,
  _channels,
  socials,
  _socials,
  ...rest
} = props
---

<Tag
  {...rest}
  {align}
>
  <slot />
  <Rating
    {rating}
    {_rating}
  />
  <Icon
    class="single-icon"
    {icon}
    {_icon}
  />
  <Writeup
    {align}
    {tagline}
    {_tagline}
    {title}
    {_title}
    {description}
    {_description}
    {writeup}
    {_writeup}
  />
  <Specs
    {specs}
    {_specs}
  />
  <Channels
    {channels}
    {_channels}
  />
  <Socials
    {socials}
    {_socials}
  />
</Tag>

<style is:global>
  .display {
    display: flex;
    row-gap: var(--spacing-4);
    flex-direction: column;
    align-items: flex-start;
    max-width: max(calc(var(--spacing-6) * 4), 500px);
    text-align: left;

    &.center {
      align-items: center;
      text-align: center;
    }

    :is(.split .center) {
      align-items: start;
      text-align: left;
    }
  }
</style>
