---
import type { HTMLAttributes } from 'astro/types'
interface Props {
  hue?: 'base' | 'accent' | null
  scale?: 'small' | 'medium' | 'large' | null
  look?: 'ghost' | 'soft' | 'solid' | null
  position?: 'relative' | 'sticky' | 'fixed' | 'absolute'
  scheme?: 'default' | 'reverse' | 'light' | 'dark'
  frame?: 'panel'
  class?: HTMLAttributes<'div'>['class']
}

const {
  hue,
  scale,
  look,
  frame,
  position = 'relative',
  scheme = 'default',
  class: className,
} = Astro.props
---

<header
  class:list={[
    'header compact',
    position,
    scheme,
    hue,
    scale,
    look,
    frame,
    className,
  ]}
>
  <slot />
</header>

<style is:global>
  header {
    display: flex;
    position: relative;
    justify-content: space-between;
    align-items: center;
    gap: var(--flow);
    z-index: 10;
    border-top-width: 0;
    border-right-width: 0;
    border-bottom-width: var(--border-width);
    border-left-width: 0;
    border-color: var(--border-color);
    background: var(--background);
    padding: var(--spacing-2) var(--gutter);

    :global(.button:first-child) {
      order: 10;
    }

    :global(.links) {
      display: none;

      @media (min-width: 1024px) {
        display: flex;
      }
    }

    &:where(.sticky) {
      position: sticky;
      top: 0;
    }

    &:where(.fixed) {
      position: fixed;
      top: 0;
      right: 0;
      left: 0;
    }

    &:where(.absolute) {
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
    }

    &:where(.panel) {
      margin: var(--spacing-2) var(--gutter);
      border-color: var(--border-color);
      border-radius: var(--radius);
      padding: var(--spacing-2) var(--spacing-2);
    }

    &:where(.soft) {
      background: var(--hue2);
    }

    &:where(.solid) {
      background: var(--hue9);
    }
  }
</style>
