---
import type { ComponentProps } from 'astro/types'
import { getEntry } from 'astro:content'
import merge from 'deepmerge'
import {
  buildProps,
  getPathname,
  getReference,
  withDefaults,
  type BuildProps,
  type GetReference,
} from '../utils'
import Composite from './Composite.astro'
import Image from './Image.astro'
import Tag from './Tag.astro'

interface Base
  extends GetReference,
    ComponentProps<typeof Composite>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'> {
  images?: Base['image'][]
  _images?: Base['_image'][]
  hue?: 'base' | 'accent'
  look?: 'ghost' | 'soft' | 'solid' | null
  frame?: 'fill' | 'panel' | 'screen' | null
  scheme?: 'default' | 'reverse' | 'light' | 'dark' | null
}

type Props = BuildProps<Base, 'card'>
let props = buildProps(Astro, 'card')

// FIXME
const reference = getReference(props)
const entry = reference && (await getEntry(reference))
const entryWithDefaults = entry && (await withDefaults(entry))
const href = getPathname(entryWithDefaults || ({} as any))

props = merge(entryWithDefaults?.data, props)

const {
  image,
  _image,
  images,
  _images,
  hue,
  look = 'soft',
  frame = 'fill',
  scheme = 'default',
  ...rest
} = props
---

<Tag
  {...rest}
  {href}
  {frame}
  {look}
  {scheme}
  density="compact"
>
  <Image
    image={image || props.images?.[0]}
    _image={_image || props._images?.[0]}
  />
  <Composite
    density="compact"
    {...restProps}
  />
</Tag>

<style is:global>
  .card {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: stretch;
    gap: var(--spacing-4);

    .composite {
      justify-content: space-between;
      gap: var(--spacing-5);
      /* height: 100%; */
    }

    &:where(a) {
      transition: var(--transition);

      &:hover > :global(img) {
        opacity: 0.85;
      }

      &:active {
        transform: scale(0.95);
      }
    }

    &.panel {
      gap: 0;
      border-radius: var(--border-radius-2);
      overflow: hidden;

      &:where(a) {
        &:hover {
          background: var(--hue3);
        }

        &:active {
          background: var(--hue4);
        }
      }

      &:where(.soft) {
        border-width: var(--border-width);
        border-color: var(--hue6);
        background-color: var(--hue2);

        &:where(a) {
          border-color: var(--hue7);
          background: var(--hue2);

          &:hover {
            border-color: var(--hue8);
            background: var(--hue3);
          }

          &:active {
            background: var(--hue4);
          }
        }

        :global(.image) {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }

      &:where(.solid) {
        border-color: var(--hue9);
        background: var(--hue9);

        :global(*) {
          color: var(--hue-fg);
        }

        &:where(a):hover {
          background: var(--hue10);
        }

        :global(.image) {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    &.landscape {
      aspect-ratio: 4/3;
      object-fit: cover;
    }

    &.square {
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    &.portrait {
      aspect-ratio: 3/4;
      object-fit: cover;
    }
  }
</style>
