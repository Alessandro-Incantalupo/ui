---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import Avatar from 'fulldev-ui/components/Avatar.astro'
import Button from 'fulldev-ui/components/Button.astro'
import Column from 'fulldev-ui/components/Column.astro'
import Price from 'fulldev-ui/components/experimental/Price.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Icon from 'fulldev-ui/components/Icon.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Label from 'fulldev-ui/components/Label.astro'
import Rating from 'fulldev-ui/components/Rating.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Row from 'fulldev-ui/components/Row.astro'
import Spread from 'fulldev-ui/components/Spread.astro'
import Text from 'fulldev-ui/components/Text.astro'
import Wrap from 'fulldev-ui/components/Wrap.astro'

type Props<As extends HTMLTag = 'a'> = Polymorphic<{ as: As }> & {
  level?: ComponentProps<typeof Heading<'h2'>>['level']
  position?: ComponentProps<typeof Image>['position']
  ratio?: ComponentProps<typeof Image>['ratio']
  image?: ComponentProps<typeof Image>['src']
  button?: ComponentProps<typeof Button<'a'>>
  buttons?: ComponentProps<typeof Button<'a'>>[]
  price?: ComponentProps<typeof Price<'span'>>['value']
  icon?: ComponentProps<typeof Icon<'i'>>['name']
  avatar?: ComponentProps<typeof Avatar>['src']
  avatars?: ComponentProps<typeof Avatar>['src'][]
  mask?: ComponentProps<typeof Image>['mask']
  label?: ComponentProps<typeof Label<'span'>>['html']
  rating?: ComponentProps<typeof Rating<'div'>>['value']
  html?: string
  text?: string
  description?: string
  heading?: string
  title?: string
  contrast?: boolean
  compact?: boolean
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  align?: 'start' | 'center' | 'end'
  radius?: 'none' | 'auto'
  frame?: 'panel' | 'none'
  color?: 'base' | 'brand'
  space?: 'auto' | 'none'
  variant?:
    | 'base'
    | 'ghost'
    | 'subtle'
    | 'surface'
    | 'outline'
    | 'soft'
    | 'surface'
    | 'solid'
}

const {
  href,
  as = href ? 'a' : 'div',
  space = 'auto',
  frame = 'panel',
  compact = true,
  radius = 'auto',
  variant = 'subtle',
  align = 'start',
  level = 4,
  position,
  label,
  heading,
  title,
  text,
  html,
  description,
  buttons,
  ratio,
  image,
  rating,
  button,
  price,
  icon,
  avatar,
  mask,
  avatars,
  ...rest
} = Astro.props
---

<Root
  class:list={['card']}
  ratio={position === 'background' ? ratio : undefined}
  {align}
  {compact}
  {href}
  {radius}
  {variant}
  {space}
  {frame}
  {as}
  {...rest}
>
  <Image
    {position}
    {mask}
    ratio={position === 'background' ? undefined : ratio}
    src={image}
  />
  <Icon name={icon} />
  <Row>
    {
      [avatar, ...(avatars ?? [])]?.filter(Boolean)?.map((avatar) => (
        <Avatar
          radius="full"
          src={avatar}
        />
      ))
    }
    <Column>
      <Rating
        color="brand"
        value={rating}
      />
      <Label
        color="base"
        html={label}
      />
    </Column>
  </Row>
  <Spread>
    <Heading
      color="base"
      {level}
      html={heading ?? title}
    />
    <Price value={price} />
  </Spread>
  <Text
    color="base"
    contrast={position === 'background' && true}
    html={html || text || description}
  />
  <Wrap>
    {
      [button, ...(buttons ?? [])]
        .filter(Boolean)
        ?.map((button: any, i: number) => (
          <Button
            color="brand"
            variant={i > 0 ? 'soft' : 'solid'}
            {...button}
          />
        ))
    }
  </Wrap>
  <slot />
</Root>

<style is:global lang="scss">
  .card {
    position: relative;
    text-decoration: none;

    &[href] {
      cursor: pointer;

      > .full.image {
        transition: var(--transition);
      }

      &:hover {
        > .full.image {
          opacity: 0.85;
        }
      }
    }

    &.ratio-landscape {
      aspect-ratio: 4/3;
    }

    &.ratio-square {
      aspect-ratio: 1/1;
    }

    &.ratio-portrait {
      aspect-ratio: 3/4;
    }

    &.frame-fill {
      border-radius: 0 !important;
    }

    &.frame-panel {
      --inner-x: var(--space-7);
      --inner-y: var(--space-7);

      border: 1px solid var(--border);
      background-color: var(--background);
      padding: var(--inner-y) var(--inner-x);
      overflow: hidden;

      &[href]:hover {
        border: 1px solid var(--border-hover);
      }

      &.radius-none {
        border-radius: 0;
      }

      &.radius-auto {
        border-radius: var(--radius-2);
      }
    }
  }
</style>
