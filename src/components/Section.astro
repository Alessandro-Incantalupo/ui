---
import type { ComponentProps } from 'astro/types'
import { getEntry } from 'astro:content'
import merge from 'deepmerge'
import {
  buildProps,
  getReference,
  withDefaults,
  type BuildProps,
  type GetReference,
} from '../utils'
import Cards from './Cards.astro'
import Composite from './Composite.astro'
import Image from './Image.astro'
import Images from './Images.astro'
import Prose from './Prose.astro'
import Tag from './Tag.astro'

interface Base
  extends GetReference,
    ComponentProps<typeof Composite>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'>,
    Pick<ComponentProps<typeof Images>, 'images' | '_images'>,
    Pick<ComponentProps<typeof Prose>, 'prose' | '_prose'>,
    Pick<ComponentProps<typeof Cards>, 'cards' | '_cards'>,
    Pick<ComponentProps<typeof Prose>, 'prose' | '_prose'> {
  hue?: 'base' | 'accent' | null
  scale?: 'small' | 'medium' | 'large' | null
  look?: 'ghost' | 'soft' | 'solid' | null
  order?: 'reverse' | 'switch' | null
  scheme?: 'invert' | 'light' | 'dark' | null
  align?: 'start' | 'center' | 'stretch' | null
  layout?: 'split' | 'stack' | null
  frame?: 'fill' | 'panel' | 'screen' | null
}

type Props = BuildProps<Base, 'section'>
const props = buildProps(Astro, 'section')

const reference = getReference(props)
const entry = reference && (await getEntry(reference))
const entryWithDefaults = entry && (await withDefaults(entry))
const entryAndProps = merge(entryWithDefaults?.data, props)

const {
  align,
  rating,
  _rating,
  icon,
  _icon,
  tagline,
  _tagline,
  title,
  _title,

  description,
  _description,
  specs,
  _specs,
  channels,
  _channels,
  socials,
  _socials,
  price,
  _price,
  buttons,
  _buttons,
  form,
  _form,
  //
  cards,
  _cards,
  image,
  _image,
  images,
  _images,
  prose,
  fields,
  _fields,
  button,
  _button,
  _prose,
  ...rest
} = entryAndProps
---

<Tag
  {align}
  {...rest}
>
  <Composite
    {form}
    {_form}
    {align}
    {rating}
    {_rating}
    {icon}
    {_icon}
    {tagline}
    {_tagline}
    {title}
    {_title}
    {description}
    {_description}
    {specs}
    {_specs}
    {channels}
    {_channels}
    {socials}
    {_socials}
    {price}
    {_price}
    {buttons}
    {_buttons}
    {fields}
    {_fields}
    {button}
    {_button}
    image={images ? images[0] : image}
  />
  <Image
    {image}
    {_image}
  />
  <Images
    {images}
    {_images}
  />
  <Cards
    {cards}
    {_cards}
  />
  <Prose
    {prose}
    {_prose}
  />
  <slot />
</Tag>

<style is:global>
  .section {
    display: flex;
    position: relative;
    flex-direction: column;
    gap: var(--spacing-5);
    background: var(--hue1);
    padding: var(--spacing-6) var(--gutter);
    overflow-x: hidden;

    /* &:first-child {
      margin-top: 0;
      padding-top: var(--spacing-5);
    } */

    &.reverse > *:first-child {
      order: 2;
    }

    &.switch:nth-child(even) > *:first-child {
      @media (min-width: 1024px) {
        order: 2;
      }
    }

    &.stack {
      display: flex;
      flex-direction: column;
    }

    &.split {
      display: grid;
      align-items: center;
      overflow-x: visible;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;

        .prose {
          grid-row: 2;
          grid-column: 1;
        }
      }
    }

    &.start {
      align-items: flex-start;
    }

    &.stretch {
      align-items: stretch;
    }

    &.center {
      align-items: center;
    }

    &.panel {
      gap: 0;
      margin: var(--spacing-6) var(--gutter);
      border-width: var(--border-width);
      border-color: var(--border-color);
      border-radius: var(--radius);
      border-radius: var(--border-radius-2);
      background: var(--background);
      padding: var(--spacing-5) var(--gutter);
      padding: 0;
    }

    &.screen {
      min-height: 100vh;
    }

    &.soft {
      border-color: var(--hue6);
      background-color: var(--hue2);
    }

    &.solid {
      border-color: var(--hue9);
      background: var(--hue9);

      * {
        color: var(--hue-fg);
      }

      .button.solid {
        border-color: var(--hue-fg);
        background: var(--hue-fg);
        color: var(--hue9);
      }

      .button.soft {
        border-color: var(--hue7);
        background: var(--hue3);
        color: var(--hue11);
      }
    }
  }
</style>
