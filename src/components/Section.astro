---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import type { CollectionEntry } from 'astro:content'
import Badge from 'fulldev-ui/components/Badge.astro'
import Box from 'fulldev-ui/components/Box.astro'
import Button from 'fulldev-ui/components/Button.astro'
import Card from 'fulldev-ui/components/Card.astro'
import Column from 'fulldev-ui/components/Column.astro'
import Heading from 'fulldev-ui/components/Heading.astro'
import Image from 'fulldev-ui/components/Image.astro'
import Label from 'fulldev-ui/components/Label.astro'
import Rating from 'fulldev-ui/components/Rating.astro'
import Root from 'fulldev-ui/components/Root.astro'
import Text from 'fulldev-ui/components/Text.astro'
import Wrap from 'fulldev-ui/components/Wrap.astro'

type Props<As extends HTMLTag = 'section'> = Polymorphic<{ as: As }> & {
  position?: ComponentProps<typeof Image>['position']
  ratio?: ComponentProps<typeof Image>['ratio']
  mask?: ComponentProps<typeof Image>['mask']
  buttons?: ComponentProps<typeof Button<'a'>>['html']
  button?: ComponentProps<typeof Button<'a'>>['html']
  cards?: ComponentProps<typeof Card<'a'>>[]
  badge?: string | ComponentProps<typeof Badge<'a'>>
  image?: ComponentProps<typeof Image>['src']
  rating?: ComponentProps<typeof Rating<'div'>>['value']
  pages?: CollectionEntry<'pages'>['data'][]
  records?: CollectionEntry<'records'>['data'][]
  heading?: string
  title?: string
  text?: string
  html?: string
  description?: string
  theme?: 'light' | 'dark'
  color?: 'base' | 'brand'
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  frame?: 'fill' | 'viewport' | 'panel'
  align?: 'start' | 'center' | 'end'
  justify?: 'start' | 'center' | 'end'
  structure?: 'column' | 'split' | 'spread' | 'carousel' | 'grid' | 'masonry'
  level?: 1 | 2 | 3 | 4 | 5 | 6
  label?: string
  space?: 'auto' | 'none'
  compact?: boolean
  reverse?: 'odd' | 'even'
  variant?:
    | 'base'
    | 'ghost'
    | 'subtle'
    | 'outline'
    | 'soft'
    | 'solid'
    | 'surface'
}

const {
  as = 'section',
  space = 'auto',
  frame = 'fill',
  structure = 'column',
  variant = 'ghost',
  align = 'start',
  level = 2,
  position,
  label,
  heading,
  badge,
  title,
  text,
  html,
  description,
  buttons,
  image,
  rating,
  size,
  button,
  cards,
  pages,
  records,
  mask,
  ratio,
  ...rest
} = Astro.props

const mergedCards = (pages || records || cards)?.filter(Boolean)
const hasCards = mergedCards && mergedCards?.length > 0
---

<Root
  class:list={['section']}
  {as}
  variant={hasCards ? undefined : variant}
  structure={structure === 'split' ? 'split' : 'column'}
  frame={frame === 'panel' && hasCards ? 'fill' : frame}
  {align}
  {space}
  {size}
  {...rest}
>
  <Box
    structure={structure === 'spread' || structure === 'carousel'
      ? 'spread'
      : 'column'}
    align={structure === 'split' ? 'start' : align}
  >
    <slot name="segment">
      <Column
        align={structure === 'split' || structure === 'spread'
          ? 'start'
          : align}
      >
        <slot name="writeup">
          <Rating value={rating} />
          <Badge
            radius="full"
            size={size === 'xl' || size === 'lg' ? 'md' : size}
            {...typeof badge === 'string' ? { html: badge } : badge}
          />
          <Label
            color="brand"
            html={label}
          />
          <Heading
            color="base"
            html={heading || title}
            {level}
          />
          <Text
            color="base"
            contrast={!hasCards && position === 'background' && true}
            html={html || text || description}
          />
        </slot>
      </Column>
      <Wrap>
        <slot name="actions">
          {
            [button, ...(buttons ?? [])]
              .filter(Boolean)
              ?.map((button: any, i: number) => (
                <Button
                  color="brand"
                  variant={i > 0 ? 'soft' : 'solid'}
                  {...button}
                />
              ))
          }
        </slot>
      </Wrap>
    </slot>
  </Box>
  <slot>
    <Box
      structure={structure === 'split' || structure === 'spread'
        ? 'column'
        : structure}
      position={structure === 'carousel' ? 'inset' : undefined}
    >
      <slot name="deck">
        {
          mergedCards?.map(({ ...rest }: any) => (
            <Card
              align="start"
              level={Number(level) + 1}
              {position}
              {frame}
              {variant}
              {ratio}
              {mask}
              {...rest}
            />
          ))
        }
      </slot>
    </Box>
    <Image
      position={hasCards ? undefined : position}
      ratio={hasCards ? undefined : ratio}
      mask={hasCards ? undefined : mask}
      src={image}
    />
  </slot>
</Root>

<style is:global lang="scss">
  .section {
    --inset-top: var(--space-7);
    --inset-left: var(--gutter-left);
    --inset-right: var(--gutter-right);
    --inset-bottom: var(--space-7);

    position: relative;
    margin: var(--outer-y) var(--outer-x);
    background-color: var(--background);

    &:first-child {
      --inset-top: var(--space-6);
      --inset-bottom: var(--space-6);
    }

    &.frame-fill {
      padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
        var(--inset-left);
    }

    &.frame-viewport {
      padding: var(--inset-top) var(--inset-right) var(--inset-bottom)
        var(--inset-left);
      min-height: 100vh;
    }

    &.frame-panel {
      margin: var(--inset-top) var(--inset-right) var(--inset-bottom)
        var(--inset-left);
      border: 1px solid var(--border);
      border-radius: var(--radius-2);
      padding: var(--space-6) min(var(--gutter), var(--space-7));
      overflow: hidden;

      & {
        @media (min-width: 1024px) {
          padding-top: var(--space-7);
          padding-bottom: var(--space-7);
        }
      }
    }

    @media (min-width: 1024px) {
      &:nth-of-type(odd).split.reverse-odd {
        > :first-child {
          order: 999;
        }

        > :last-child {
          order: 0;
        }
      }

      &:nth-of-type(even).split.reverse-even {
        > :first-child {
          order: 0;
        }

        > :last-child {
          order: 999;
        }
      }
    }

    // &.frame-contain {
    //   --inner-x: max(4vw);
    //   --outer-x: max(0px, calc(var(--gutter) - var(--inner-x)));
    //   --inner-y: var(--space-7);
    //   --outer-y: 0;
    // }

    // &.order-reverse {
    //   --is-reverse: initial;

    //   > *:first-child {
    //     order: 999;
    //   }

    //   & > *:last-child {
    //     order: -999;
    //   }
    // }
  }
</style>
