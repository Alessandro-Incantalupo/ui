---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import { buildProps, getSlot, type BuildProps } from '../../utils'
import { Icon } from '../icon'

interface Base extends ComponentProps<typeof Icon> {
  look?: 'solid' | 'soft' | 'ghost' | null
  hue?: 'accent' | 'base' | null
  text?: string | null
  href?: HTMLAttributes<'a'>['href']
  class?: HTMLAttributes<'div'>['class']
}

type Props = BuildProps<Base, 'button'>
const props = buildProps(Astro, 'button')
const slot = await getSlot(Astro)

const {
  look = 'solid',
  hue = 'accent',
  icon,
  description,
  href,
  class: className,
} = props
const Tag = href ? 'a' : 'button'
---

{
  (icon || description || slot) && (
    <Tag
      class:list={['button', look, hue, className]}
      {href}
    >
      <Icon
        class="button-icon"
        {icon}
        {hue}
      />
      <Fragment set:html={slot} />
      {description}
    </Tag>
  )
}

<style>
  a,
  button {
    display: inline-flex;
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: auto;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-1);
    transition: var(--transition);
    cursor: pointer;
    border-width: var(--border-width);
    border-radius: var(--border-radius-2);
    padding: var(--spacing-3);
    line-height: 1;
    text-align: center;
    white-space: nowrap;

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    &:active {
      transform: scale(0.95);
    }

    &:where(.solid) {
      border-color: var(--hue9);
      background: var(--hue9);
      color: var(--huefg);

      &:hover {
        border-color: var(--hue10);
        background: var(--hue10);
      }
    }

    &:where(.soft) {
      border-color: var(--hue7);
      background: var(--hue3);
      color: var(--hue11);

      :global(.icon) {
        color: var(--hue11);
      }

      &:hover {
        border-color: var(--hue8);
        background: var(--hue4);
      }

      &:active {
        background: var(--hue5);
      }
    }

    &:where(.ghost) {
      border-color: transparent;
      color: var(--hue11);

      &:hover {
        background: var(--hue2);
      }

      &:active {
        background: var(--hue3);
      }
    }
  }
</style>
