---
import { Icon } from '@silveltman/fullui/src/components/icon'
import { getSlot } from '@silveltman/fullui/src/utils'
import type { ComponentProps, HTMLAttributes } from 'astro/types'

interface Props extends ComponentProps<typeof Icon> {
  text?: string | null
  variant?: 'primary' | 'secondary'
  href?: HTMLAttributes<'a'>['href']
  class?: HTMLAttributes<'div'>['class']
}

const { icon, text, variant = 'primary', href, class: className } = Astro.props
const slot = await getSlot(Astro)
---

{
  (icon || text || slot) && (
    <a
      class:list={['fullui', variant, className]}
      href={href}
    >
      <Icon {icon} />
      {text}
      <Fragment set:html={slot} />
    </a>
  )
}

<style>
  a {
    color: var(--color);
    border: var(--border);
    background: var(--background);
    font: var(--font);
    border-radius: var(--radius);
    transition: var(--radius);
    font-size: var(--inherit);

    gap: 0.75rem;
    display: inline-flex;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    text-align: center;
    white-space: nowrap;
    padding: var(--flow3);
    transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);
    line-height: 1;
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: auto;

    /* transform: scale(0.95); */
    &:disabled {
      pointer-events: none;
      opacity: 0.5;
      cursor: not-allowed;
    }

    &:hover {
      border: var(--border-hover, var(--border));
      background: var(--background-hover, var(--background));
    }

    &:active {
      border: var(--border-active, var(--border-hover, var(--border)));
      background: var(
        --background-active,
        var(--background-hover, var(--background))
      );
    }

    /* &:first-child {
      color: var(--primary-text);
      background: var(--primary-bg);
      border-color: var(--primary-ring);

      &:hover {
        background-color: var(--primary-bg-hover);
        border-color: var(--primary-ring-hover);
      }

      &:active {
        background: var(--primary-bg-active);
      }
    }

    &:last-child:not(:first-child) {
      color: var(--secondary-text);
      background: var(--secondary-bg);
      border-color: var(--secondary-ring);

      &:hover {
        background-color: var(--secondary-bg-hover);
        border-color: var(--secondary-ring-hover);
      }

      &:active {
        background: var(--secondary-bg-active);
      }
    } */
  }
</style>
