---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import { getSlot } from '../../utils'
import { Icon } from '../icon'

interface Props extends ComponentProps<typeof Icon> {
  look?: 'solid' | 'soft' | 'ghost' | null
  text?: string | null
  href?: HTMLAttributes<'a'>['href']
  class?: HTMLAttributes<'div'>['class']
}

const { look = 'solid', icon, text, href, class: className } = Astro.props
const Tag = href ? 'a' : 'button'
const slot = await getSlot(Astro)
---

{
  (icon || text || slot) && (
    <Tag
      class:list={['button', look, className]}
      {href}
    >
      <Icon {icon} />
      <Fragment set:html={slot} />
      {text}
    </Tag>
  )
}

<style>
  a,
  button {
    display: inline-flex;
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: auto;
    justify-content: center;
    align-items: center;
    gap: var(--spacing-1);
    transition: var(--transition);
    cursor: pointer;
    border-width: var(--border-width);
    border-radius: var(--border-radius-2);
    padding: var(--spacing-3);
    line-height: 1;
    text-align: center;
    white-space: nowrap;

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    &:active {
      transform: scale(0.95);
    }

    &:where(.solid) {
      border-color: var(--accent-9);
      background: var(--accent-9);
      color: var(--accent-fg);

      &:hover {
        border-color: var(--accent-10);
        background: var(--accent-10);
      }
    }

    &:where(.soft) {
      border-color: var(--accent-7);
      background: var(--accent-3);
      color: var(--accent-11);

      &:hover {
        border-color: var(--accent-8);
        background: var(--accent-4);
      }

      &:active {
        background: var(--accent-5);
      }
    }

    &:where(.ghost) {
      border-color: transparent;
      color: var(--accent-11);

      &:hover {
        background: var(--accent-2);
      }

      &:active {
        background: var(--accent-3);
      }
    }
  }
</style>
