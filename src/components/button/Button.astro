---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import { getSlot } from '../../utils'
import { Icon } from '../icon'

interface Props extends ComponentProps<typeof Icon> {
  text?: string | null
  href?: HTMLAttributes<'a'>['href']
  variant?: 'primary' | 'secondary' | 'tertiary'
  look?: 'solid' | 'soft' | 'ghost'
  class?: HTMLAttributes<'div'>['class']
}

const { icon, text, variant = 'primary', href, class: className } = Astro.props
const slot = await getSlot(Astro)
---

{
  (icon || text || slot) && (
    <a
      class:list={['fullui button', variant, className]}
      href={href}
    >
      <Icon {icon} />
      {text}
      <Fragment set:html={slot} />
    </a>
  )
}

<style>
  a {
    transition: var(--transition);
    padding: var(--spacing-3);
    gap: var(--spacing-1);

    display: inline-flex;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    text-align: center;
    white-space: nowrap;
    line-height: 1;
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: auto;
    transform: scale(0.95);

    &:disabled {
      pointer-events: none;
      opacity: 0.5;
      cursor: not-allowed;
    }

    &:where(.solid) {
      background: var(--hue-9);
      color: var(--hue-fg);

      &:hover {
        background: var(--hue-10);
      }
    }

    &:where(.soft) {
      background: var(--hue-3);
      border-color: var(--hue-7);
      color: var(--hue-11);

      &:hover {
        background: var(--hue-4);
        border-color: var(--hue-8);
      }

      &:active {
        background: var(--hue-5);
      }
    }

    &:where(.ghost) {
      color: var(--hue-11);

      &:hover {
        background: var(--hue-2);
      }

      &:active {
        background: var(--hue-3);
      }
    }
  }
</style>
