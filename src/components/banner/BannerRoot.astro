---
import type { HTMLAttributes } from 'astro/types'
import { getSlot } from 'src'

interface Props {
  position?: 'relative' | 'sticky' | 'fixed' | 'absolute'
  scheme: 'default' | 'reverse' | 'light' | 'dark'
  impact: 'low' | 'medium' | 'high' | 'extreme'
  area: 'default' | 'panel'
  class?: HTMLAttributes<'div'>['class']
}

const {
  position = 'relative',
  scheme = 'default',
  impact = 'medium',
  area = 'default',
  class: className,
} = Astro.props

const slot = await getSlot(Astro)
---

{
  slot && (
    <header
      class:list={[
        'header flow-compact',
        'position-' + position,
        'scheme-' + scheme,
        scheme + '-theme',
        scheme,
        'impact-' + impact,
        'area-' + area,
        className,
      ]}
    >
      <Fragment set:html={slot} />
    </header>
  )
}

<style>
  header {
    display: flex;
    justify-content: space-between;
    padding: var(--flow1) var(--gutter);
    gap: var(--flow);
    align-items: center;
    z-index: 10;
    background-color: var(--bg);
    border-color: var(--ring);
    border-bottom-width: var(--borderWidth);

    &:where(.position-sticky) {
      position: sticky;
      top: 0;
    }

    &:where(.position-fixed) {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
    }

    &:where(.position-absolute) {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
    }

    &:where(.area-panel) {
      border-width: var(--borderWidth);
      margin: var(--flow2) var(--gutter);
      border-radius: var(--rounded2);
      padding: var(--flow2) var(--flow2);
    }
  }
</style>
