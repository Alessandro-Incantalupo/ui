---
import type { HTMLAttributes } from 'astro/types'
import { getSlot } from '../../utils'

interface Props {
  hue?: 'base' | 'accent'
  look?: 'ghost' | 'soft' | 'solid' | null
  frame?: 'fill' | 'panel' | 'screen' | null
  scheme?: 'default' | 'reverse' | 'light' | 'dark' | null
  href?: HTMLAttributes<'a'>['href']
  class?: HTMLAttributes<'div'>['class']
}

const {
  hue,
  look = 'soft',
  frame = 'fill',
  scheme = 'default',
  href,
  class: className,
} = Astro.props

const slot = await getSlot(Astro)
const As = href ? 'a' : 'div'
---

{
  slot && (
    <As
      class:list={['card', 'compact', hue, frame, look, scheme, className]}
      href={href}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style>
  div,
  a {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: stretch;
    gap: var(--spacing-4);

    :global(.composite) {
      justify-content: space-between;
      gap: var(--spacing-5);
      /* height: 100%; */
    }

    &:where(a) {
      transition: var(--transition);

      &:hover > :global(img) {
        opacity: 0.85;
      }

      &:active {
        transform: scale(0.95);
      }
    }

    &:where(.panel) {
      gap: 0;
      border-radius: var(--border-radius-2);
      overflow: hidden;

      &:where(a) {
        &:hover {
          background: var(--hue3);
        }

        &:active {
          background: var(--hue4);
        }
      }

      &:where(.soft) {
        border-width: var(--border-width);
        border-color: var(--hue6);
        background-color: var(--hue2);

        &:where(a) {
          border-color: var(--hue7);
          background: var(--hue2);

          &:hover {
            border-color: var(--hue8);
            background: var(--hue3);
          }

          &:active {
            background: var(--hue4);
          }
        }

        :global(.image) {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }

      &:where(.solid) {
        border-color: var(--hue9);
        background: var(--hue9);

        :global(*) {
          color: var(--huefg);
        }

        &:where(a):hover {
          background: var(--hue10);
        }

        :global(.image) {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    &:where(.landscape) {
      aspect-ratio: 4/3;
      object-fit: cover;
    }

    &:where(.square) {
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    &:where(.portrait) {
      aspect-ratio: 3/4;
      object-fit: cover;
    }
  }
</style>
