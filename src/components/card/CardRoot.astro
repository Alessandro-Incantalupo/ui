---
import type { HTMLAttributes } from 'astro/types'
import { getSlot } from 'src/utils'

interface Props {
  frame?: 'fill' | 'panel'
  scheme?: 'default' | 'reverse' | 'light' | 'dark'
  href?: HTMLAttributes<'a'>['href']
  class?: HTMLAttributes<'div'>['class']
}

const {
  frame = 'fill',
  scheme = 'default',
  href,
  class: className,
} = Astro.props
const slot = await getSlot(Astro)
const As = href ? 'a' : 'div'
---

{
  slot && (
    <As
      class:list={[
        'card flow-compact',
        'frame-' + frame,
        frame,
        'scheme-' + scheme,
        scheme + '-theme',
        scheme,
        className,
      ]}
      href={href}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style>
  div,
  a {
    transition: var(--transition);
    container: cardRoot / inline-size;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: var(--flow-self4);
    text-align: left;

    & > img {
      opacity: 0.75;
    }
    &:where(.soft) {
    }
    &:where(.ghost) {
      background-color: transparent;
    }
    &:where(.landscape) {
      aspect-ratio: 4/3;
      object-fit: cover;
    }
    &:where(.square) {
      aspect-ratio: 1/1;
      object-fit: cover;
    }
    &:where(.portrait) {
      aspect-ratio: 3/4;
      object-fit: cover;
    }

    &:where(.frame-panel) {
      background: var(--background);
      border: var(--border);
      border-radius: var(--radius);
      gap: 0;
      overflow: hidden;

      &[href]:hover {
        border: var(--border-hover, var(--border));
        background: var(--background-hover, var(--background));
      }

      &[href]:active {
        border: var(--border-active, var(--border-hover, var(--border)));
        background: var(
          --background-active,
          var(--background-hover, var(--background))
        );
      }
    }

    &[href]:hover {
      :global(img) {
        opacity: 0.75;
      }
    }
  }
</style>
