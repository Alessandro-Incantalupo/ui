---
import type { ComponentProps } from 'astro/types'
import {
  getEntry,
  type CollectionEntry,
  type ContentCollectionKey,
} from 'astro:content'
import { getCollectionDefault, getPathname } from '../../utils'
import { Composite } from '../composite'
import { Image } from '../image'
import CardRoot from './CardRoot.astro'

interface Props
  extends ComponentProps<typeof CardRoot>,
    ComponentProps<typeof Composite> {
  reference?: {
    collection: ContentCollectionKey
    slug: CollectionEntry<ContentCollectionKey>['slug']
  }
  collection?: ContentCollectionKey
  slug?: CollectionEntry<ContentCollectionKey>['slug']
  image?: ComponentProps<typeof Image>
}

let { collection, slug, reference, ...restProps } = Astro.props
reference = collection && slug && { collection, slug }
let entry = reference && (await getEntry(reference))
let _data = entry && (await getCollectionDefault(entry.collection, Astro))
// TODO find better way to handle collection defaults
const merged = {
  ...entry,
  data: { ..._data, ...entry?.data },
}
// TODO type fix
const href = getPathname(merged || ({} as any))
const props = { ...merged?.data, ...restProps }
---

<CardRoot
  {href}
  {...props}
>
  <Image
    {...props}
    {...props.images?.[0]}
    {...props.image}
  />
  <slot />
  <Composite
    {...props}
    density="compact"
  />
</CardRoot>
