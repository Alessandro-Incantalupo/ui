---
import type { ComponentProps } from 'astro/types'
import {
  getEntry,
  type CollectionEntry,
  type ContentCollectionKey,
} from 'astro:content'
import { CardRoot, CardSegment } from '.'
import { Buttons } from '..'
import Icon from '../Icon.astro'
import Price from '../Price.astro'
import Rating from '../Rating.astro'
import Writeup from '../writeup/Writeup.astro'

interface Props
  extends ComponentProps<typeof CardRoot>,
    ComponentProps<typeof CardSegment>,
    ComponentProps<typeof Icon>,
    ComponentProps<typeof Rating>,
    ComponentProps<typeof Writeup>,
    ComponentProps<typeof Price>,
    ComponentProps<typeof Buttons> {
  reference?: {
    collection: ContentCollectionKey
    slug: CollectionEntry<ContentCollectionKey>['slug']
  }
  collection?: ContentCollectionKey
  slug?: CollectionEntry<ContentCollectionKey>['slug']
}

let { collection, slug, reference, ...restProps } = Astro.props
const entry =
  reference &&
  (await getEntry({
    collection: collection || reference.collection,
    slug: slug || reference.slug,
  }))
const props = { ...entry?.data, ...restProps }
---

<CardRoot {...props}>
  <slot />
  <CardSegment {...props}>
    <Icon {...props} />
    <Rating {...props} />
    <Writeup {...props}>
      <slot name="writeup" />
    </Writeup>
    <Price {...props} />
    <!-- <Specs {...props} /> -->
    <Buttons {...props} />
    <slot name="segment" />
  </CardSegment>
</CardRoot>
