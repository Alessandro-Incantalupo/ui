---
import type { ComponentProps } from 'astro/types'
import { getEntry } from 'astro:content'
import merge from 'deepmerge'
import {
  buildProps,
  getPathname,
  getReference,
  withDefaults,
  type BuildProps,
  type GetReference,
} from '../../utils'
import { Composite } from '../composite'
import { Image } from '../image'
import CardRoot from './CardRoot.astro'

interface Base
  extends GetReference,
    ComponentProps<typeof CardRoot>,
    ComponentProps<typeof Composite>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'> {}

type Props = BuildProps<Base, 'card'>
let props = buildProps(Astro, 'card')

const reference = getReference(props)
const entry = reference && (await getEntry(reference))
const entryWithDefaults = entry && (await withDefaults(entry))
const href = getPathname(entryWithDefaults || ({} as any))

props = merge(entryWithDefaults?.data, props)

const { image, _image, ...restProps } = props
---

<CardRoot
  {href}
  {...restProps}
>
  <Image
    {_image}
    {image}
  />
  <Composite
    density="compact"
    {...restProps}
  />
</CardRoot>
