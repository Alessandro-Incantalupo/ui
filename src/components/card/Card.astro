---
import type { ComponentProps } from 'astro/types'
import {
  getEntry,
  type CollectionEntry,
  type ContentCollectionKey,
} from 'astro:content'
import { CardRoot, CardSegment } from '.'
import { Buttons } from '../buttons'
import Icon from '../icon/Icon.astro'
import { Image } from '../image'
import Price from '../price/Price.astro'
import Rating from '../rating/Rating.astro'
import { Specs } from '../specs'
import Writeup from '../writeup/Writeup.astro'

interface Props
  extends ComponentProps<typeof CardRoot>,
    ComponentProps<typeof CardSegment>,
    ComponentProps<typeof Icon>,
    ComponentProps<typeof Rating>,
    ComponentProps<typeof Image>,
    ComponentProps<typeof Writeup>,
    ComponentProps<typeof Price>,
    ComponentProps<typeof Specs>,
    ComponentProps<typeof Buttons> {
  reference?: {
    collection: ContentCollectionKey
    slug: CollectionEntry<ContentCollectionKey>['slug']
  }
  collection?: ContentCollectionKey
  slug?: CollectionEntry<ContentCollectionKey>['slug']
}

let { collection, slug, reference, ...restProps } = Astro.props
reference = collection && slug && { collection, slug }
let entry = reference && (await getEntry(reference))
let href = reference && `/${reference.collection}/${reference.slug}`

const props = { ...entry?.data, ...restProps }
---

<CardRoot
  {href}
  {...props}
>
  <Image
    {...props}
    {...props.images?.[0]}
    {...props.image}
  />
  <slot />
  <CardSegment {...props}>
    <Icon {...props} />
    <Rating {...props} />
    <Writeup {...props}>
      <slot name="writeup" />
    </Writeup>
    <Price {...props} />
    <Specs {...props} />
    <Buttons {...props} />
    <slot name="segment" />
  </CardSegment>
</CardRoot>
