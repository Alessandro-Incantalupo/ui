---
import type { HTMLAttributes } from 'astro/types'
import { getSlot } from '../../utils'

interface Props {
  layout?: 'carousel' | 'grid' | 'masonry' | 'row' | 'panels' | 'bento'
  class?: HTMLAttributes<'div'>['class']
}

const { layout = 'grid', class: className } = Astro.props
const slot = await getSlot(Astro)
---

{
  slot && (
    <div class:list={['cards-root cards', layout, className]}>
      <Fragment set:html={slot} />
    </div>
  )
}

<style>
  div {
    position: relative;
    width: 100%;

    &:where(.row) {
      display: grid;
      row-gap: var(--spacing-4);

      @media (min-width: 1024px) {
        grid-auto-columns: 6fr 1fr;
        grid-auto-flow: column;

        :global(> *) {
          &:nth-child(2) {
            grid-column-start: 3;
          }
          &:nth-child(3) {
            grid-column-start: 5;
          }
          &:nth-child(4) {
            grid-column-start: 7;
          }
          &:nth-child(5) {
            grid-column-start: 9;
          }
          &:nth-child(6) {
            grid-column-start: 11;
          }
        }
      }
    }

    &:where(.carousel) {
      display: flex;
      position: relative;
      flex-direction: row;
      align-items: start;
      gap: var(--spacing-3);
      margin: 0 calc(var(--gutter) * -1);
      padding: 0 var(--gutter) var(--spacing-3);
      width: 100vw;
      overflow-x: auto;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;

      :global(> *) {
        /* TODO add multiple sizes */
        flex-grow: 0;
        flex-shrink: 0;
        width: calc(7 * var(--spacing-6));
        scroll-snap-align: center;
      }
    }

    &:where(.grid) {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      column-gap: var(--spacing-3);
      row-gap: var(--spacing-4);
    }

    &:where(.masonry) {
      column-gap: var(--spacing-3);
      /* 'w-full space-y-size5 columns-2 space-y-size4 size-small:columns-2 size-large:columns-1 [&>*]:grow [&>*]:break-inside-avoid-column',
        'sm:columns-[308px] size-small:sm:columns-[220px] size-large:sm:columns-2',
        'size-large:md:columns-[385px]', */
      flex-direction: column;
      align-items: flex-start;
      column-count: var(--columns);

      @media (min-width: 640px) {
        --columns: 2;
      }
      @media (min-width: 768px) {
        --columns: 3;
      }

      @media (min-width: 1024px) {
        --columns: 4;
      }

      :global(& > :not([hidden]) ~ :not([hidden])) {
        --un-space-y-reverse: 0;
        break-inside: avoid-column;
        margin-top: var(--spacing-4);
        margin-bottom: var(--spacing-4);
      }
    }

    &:where(.panels) {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: var(--spacing-3);
    }

    &:where(.bento) {
      display: grid;
      grid-template-columns: 1fr;

      @media (min-width: 1024px) {
        grid-template-columns: 1fr 1fr 1fr;

        :global(& > *:nth-child(2n)) {
          grid-column-start: span 2;
        }
      }
    }
  }
</style>
