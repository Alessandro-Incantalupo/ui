---
import { getCollection, type ContentCollectionKey } from 'astro:content'
import {
  CategoriesLayout,
  FormsLayout,
  PagesLayout,
  PoliciesLayout,
  PostsLayout,
  ProductsLayout,
  ServicesLayout,
} from 'src'
import { getRouteByEntry } from '../utils'

// Function to generate static paths for all entries in all collections
export async function getStaticPaths() {
  // Object containing all collections keys
  const collections: ContentCollectionKey[] = [
    'pages',
    'services',
    'posts',
    'products',
    'categories',
    'forms',
    'policies',
  ]
  // Get all entries from all collections, resolve promises, flatten array, and filter out any undefined values
  const promises = collections.map((key) => getCollection(key))
  const results = await Promise.all(promises)
  const flattened = results.flat()
  const filtered = flattened.filter(Boolean)
  const entries = filtered

  // Return paths for all entries
  return entries.map((entry) => ({
    params: {
      route:
        getRouteByEntry(entry) === '/' ? undefined : getRouteByEntry(entry),
    },
    props: {
      entry: entry,
      frontmatter: entry.data,
    },
  }))
}

// Object containing all layouts for each collection
const layouts: {
  [key in ContentCollectionKey]?: any
} = {
  pages: PagesLayout,
  policies: PoliciesLayout,
  categories: CategoriesLayout,
  products: ProductsLayout,
  posts: PostsLayout,
  services: ServicesLayout,
  forms: FormsLayout,
  // reviews: ReviewsLayout,
}

// Get current entry from props
const { entry, frontmatter } = Astro.props
// Get layout for current entry
const CollectionLayout = layouts[entry.collection]
---

<CollectionLayout entry={entry} />
