---
import type { HTMLTag } from 'astro/types'
import { getCollection } from 'astro:content'
import {
  Button,
  Header as FullHeader,
  Heading,
  Link,
  Logo,
  Row,
} from 'fulldev-ui'
import Drawer from 'fulldev-ui/components/Drawer.astro'
import Search from 'fulldev-ui/components/Search.astro'
import type { Block } from '../schemas/block'

type Props<As extends HTMLTag = 'header'> = Omit<Block<As>, 'structure'> & {
  variant?: 'ghost' | 'base' | 'subtle' | 'soft' | 'surface' | 'outline'
  structure?: 'spread' | 'row' | 'column'
  align?: 'start' | 'center' | 'end'
  logo?: string
  heading?: string
  links?: any[]
  buttons?: any[]
  drawer?: any[]
}

const {
  variant = 'ghost',
  align = 'center',
  structure = 'spread',
  logo,
  heading,
  links,
  buttons,
  drawer,
  search,
  ...rest
} = Astro.props

const currentPath = Astro.url.pathname

const getCollectionPages = async (folder: string) => {
  return await getCollection('pages', (entry: any) =>
    entry.slug.startsWith(`${folder}/`)
  )
}

const sortPages = (pages: any[]) =>
  pages.sort(
    (a, b) => (a.data.sidebar?.order || 0) - (b.data.sidebar?.order || 0)
  )
---

<FullHeader
  class:list={'header'}
  {align}
  {structure}
  {variant}
  {...rest}
>
  <Row
    style={{ textDecoration: 'none', height: '100%' }}
    as="a"
    href="/"
  >
    <Logo src={logo} />
    <Heading
      as="p"
      level={3}
      text={heading}
    />
  </Row>
  <Row>
    {
      links?.map((link, i) => (
        <Link
          class={'header-link'}
          {...link}
        />
      ))
    }
    {buttons?.map((button, i) => <Button {...button} />)}
    <Search {...search} />
    <Drawer
      icon="menu-2"
      id="navigation-drawer"
    >
      {
        drawer?.map((section: any) => (
          <>
            <Heading level={4}>{section.heading}</Heading>
            {section.links &&
              section.links.map((link: any) => (
                <Link
                  class:list={'header-link-sidebar'}
                  href={link.href}
                  color={currentPath === link.href ? 'brand' : undefined}
                >
                  {link.text}
                </Link>
              ))}
            {section.folder && (
              <>
                {getCollectionPages(section.folder).then((pages) =>
                  pages.map((page: any) => (
                    <Link
                      class:list={'header-link-sidebar'}
                      href={`/${page.slug}`}
                      color={
                        currentPath === `/${page.slug}` ? 'brand' : undefined
                      }
                    >
                      {page.data.title}
                    </Link>
                  ))
                )}
              </>
            )}
          </>
        ))
      }
    </Drawer>
  </Row>
</FullHeader>

<style lang="scss" is:global>
  .header {
    position: relative;

    .header-link {
      display: none;
      font-size: var(--text-1);

      @media (min-width: 768px) {
        display: flex;
      }
    }

    .header-link-sidebar {
      font-size: var(--text-1);
    }

    .drawer-button {
      @media (min-width: 768px) {
        display: none !important;
      }
    }

    .dropdown {
      display: none;
      position: absolute;
      top: 100%;
      right: 0;
      left: 0;
      gap: var(--space-4);
      margin-left: 0 !important;
      box-shadow: 0 100px 100px rgba(0, 0, 0, 0.2);
      border-bottom: 1px solid var(--color-6);
      background: var(--color-1);
      padding-top: var(--space-6);
      padding-bottom: var(--space-6);
      width: 100%;

      @media (min-width: 768px) {
        display: none !important;
      }
    }
  }
</style>
