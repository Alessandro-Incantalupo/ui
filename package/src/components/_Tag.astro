---
interface Props {
  theme?: 'light' | 'dark' | string
  size?: 'sm' | 'md' | 'lg' | string
  density?: 'base' | 'compact' | string
  slot?: any
  if?: 'slot' | any
  [key: string | number | symbol]: any
}

const {
  as: As = 'div',
  if: ifProp = 'slot',
  theme,
  variant,
  density,
  size,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const render = ifProp === 'slot' ? slot?.trim().length > 0 : ifProp
---

{
  render && (
    <As
      class:list={[
        'full',
        {
          [`theme-${theme}`]: theme,
          [`variant-${variant}`]: variant,
          [`density-${density}`]: density,
          [`size-${size}`]: size,
        },
      ]}
      {...rest}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global lang="scss">
  @import '../css/colors.css';
  @import '../css/styles.css';
  @import '../css/sizes.css';

  .full {
    z-index: 0;
    box-sizing: border-box;
  }
</style>
