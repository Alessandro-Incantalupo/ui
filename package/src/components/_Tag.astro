---
// interface Props {
//   theme?: 'light' | 'dark' | string
//   size?: 'sm' | 'md' | 'lg' | string
//   density?: 'base' | 'compact' | string
//   slot?: any
//   if?: 'slot' | any
//   [key: string | number | symbol]: any
// }

const {
  as: As = 'div',
  if: ifProp = 'content',
  theme,
  variant,
  density,
  size,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = (str: string) => str.trim().length > 0 
const render = ifProp === 'content' ? (hasContent(slot) || hasContent(Astro.props.html) || hasContent(Astro.props.text)) : ifProp
---

{
  render && (
    <As
      class:list={[
        'full',
        {
          [`theme-${theme}`]: theme,
          [`variant-${variant}`]: variant,
          [`density-${density}`]: density,
          [`size-${size}`]: size,
        },
      ]}
      {...rest}
    >
      {Object.entries(Astro.props).map(([key, value]) => {
        if (key === 'text') return <Fragment set:text={value} />
        if (key === 'html') return <Fragment set:html={value} />
      })}
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global lang="scss">
  @import '../css/colors.css';
  @import '../css/styles.css';
  @import '../css/sizes.css';

  .full {
    z-index: 0;
    box-sizing: border-box;
  }
</style>
