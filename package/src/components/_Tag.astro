---
import type { HTMLTag, Polymorphic } from 'astro/types'

type Props<As extends HTMLTag = 'div'> = Polymorphic<{ as: As }> & {
  if?: 'slot' | any
  theme?: 'light' | 'dark'
  color?: 'base' | 'lowered' | 'raised' | 'primary' | 'secondary' | 'input'
  size?: 'sm' | 'md' | 'lg'
  density?: 'base' | 'compact'
  slot?: any
  [key: string | number | symbol]: any
}

const {
  as: As = 'div',
  if: ifProp = true,
  theme,
  color,
  density,
  size,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const render = ifProp === 'slot' ? slot?.trim().length > 0 : ifProp
---

{
  render && (
    <As
      class:list={[
        'full-tag',
        {
          [`full-theme-${theme}`]: theme,
          [`full-color-${color}`]: color,
          [`full-density-${density}`]: density,
          [`full-size-${size}`]: size,
        },
      ]}
      {...rest}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style>
  /* FIXME: reset is local now, so duplicate selectors */
  /* temp fix for starlight theme break because of reset */
  @import '../css/reset.css';
</style>

<style is:global>
  @import '../css/main.css';
</style>
