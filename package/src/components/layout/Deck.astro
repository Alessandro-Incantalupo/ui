---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import type { Childmorphic } from '../../types/Childmorphic'
import type Card from './Card.astro'
import type Stack from './Stack.astro'
import Layout from './_Layout.astro'

type Props<As extends HTMLTag> = Polymorphic<{ as: As }> &
  ComponentProps<typeof Layout> &
  Childmorphic<{
    stack: ComponentProps<typeof Stack>
    card: ComponentProps<typeof Card>
  }> & {
    layout?: 'carousel' | 'grid' | 'masonry' | 'row' | 'panels' | 'bento'
  }

const { layout, ...rest } = Astro.props
---

<Layout
  class:list={['full-deck', layout]}
  {...rest}
>
  <slot name="before" />
  <slot />
</Layout>

<style is:global lang="scss">
  .full-deck {
    position: relative;
    width: 100%;

    &.row {
      display: grid;
      row-gap: var(--space-4);

      @media (min-width: 1024px) {
        grid-auto-columns: 6fr 1fr;
        grid-auto-flow: column;

        > * {
          &:nth-child(2) {
            grid-column-start: 3;
          }
          &:nth-child(3) {
            grid-column-start: 5;
          }
          &:nth-child(4) {
            grid-column-start: 7;
          }
          &:nth-child(5) {
            grid-column-start: 9;
          }
          &:nth-child(6) {
            grid-column-start: 11;
          }
        }
      }
    }

    &.carousel {
      display: flex;
      position: relative;
      flex-direction: row;
      align-items: flex-start;
      gap: var(--space-3);
      margin: 0 calc(var(--space-gutter) * -1);
      padding: 0 var(--space-gutter) var(--space-3);
      width: 100vw;
      overflow-x: auto;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;

      & > .card {
        /* TODO add multiple sizes */
        flex-grow: 0;
        flex-shrink: 0;
        width: calc(7 * var(--space-5));
        scroll-snap-align: center;
      }
    }

    &.grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      column-gap: var(--space-3);
      row-gap: var(--space-4);
    }

    &.masonry {
      column-gap: var(--space-3);
      column-count: 1;

      @media (min-width: 640px) {
        column-count: 2;
      }
      @media (min-width: 768px) {
        column-count: 3;
      }

      @media (min-width: 1024px) {
        column-count: 4;
      }

      & > .card + .card {
        margin-top: var(--space-4);
        margin-bottom: var(--space-4);
      }
    }

    &.panels {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: var(--space-3);
    }

    &.bento {
      display: grid;
      grid-template-columns: 1fr;

      @media (min-width: 1024px) {
        grid-template-columns: 1fr 1fr 1fr;

        & > *:nth-child(2n) {
          grid-column-start: span 2;
        }
      }
    }
  }
</style>
