---
import type { ComponentProps, HTMLTag } from 'astro/types'
import Stack from '../layout/Stack.astro'
import Children from '../utility/Children.astro'

type Props<As extends HTMLTag = 'div'> = ComponentProps<typeof Stack<As>> &
  ComponentProps<typeof Children> & {
    variant?: 'solid' | 'soft' | 'ghost'
    frame?: 'viewport' | 'panel'
    reverse?: true | 'odd' | 'even'
  }

const { as = 'section', reverse, variant, frame, ...rest } = Astro.props
---

<Stack
  class:list={[
    'full-section',
    {
      [`full-variant-${variant}`]: variant,
      [`full-frame-${frame}`]: frame,
      [`full-reverse-${reverse}`]: reverse,
    },
  ]}
  {as}
  {...rest}
>
  <slot name="before" />
  <slot />
</Stack>

<style is:global lang="scss">
  .full-section {
    position: relative;
    background: var(--color-background);
    padding: var(--space-spacer) var(--space-gutter);
    width: 100%;
    overflow-x: hidden;

    /* &:first-child {
      padding-top: var(--space-5);
    }

    &:last-child {
      padding-bottom: var(--space-5);
    } */
  }

  .full-reverse-true {
    --full-reverse: 1;
  }

  .full-reverse-even:nth-child(even) {
    --full-reverse: 1;
  }

  .full-reverse-odd:nth-child(odd) {
    --full-reverse: 1;
  }

  .full-reverse-even,
  .full-reverse-odd,
  .full-reverse-true {
    @media (min-width: 1024px) {
      > .full-tag {
        order: 0;

        &:first-child {
          order: var(--full-reverse, 0);
        }

        &:last-child {
          order: calc(var(--full-reverse, 0) * -1);
        }
      }
    }
  }

  .full-frame-viewport {
    height: auto;
    min-height: 100vh;
  }

  // &.full-frame-panel {
  //   margin: var(--space-5) var(--space-gutter);
  //   border-width: var(--border-width);
  //   border-color: var(--border-color);
  //   border-radius: var(--full-border-radius-2);
  //   background: var(--color-background);
  //   padding: var(--space-5) var(--space-gutter);
  //   padding: 0;
  // }
</style>
