---
import type { ComponentProps, HTMLTag } from 'astro/types'
import Children from '../utility/Children.astro'
import Tag from '../utility/Tag.astro'

type Props<As extends HTMLTag = 'div'> = ComponentProps<typeof Tag<As>> &
  ComponentProps<typeof Children> & {
    direction?: 'row' | 'column'
    align?: 'start' | 'center'
    frame?: 'screen' | 'panel'
    variant?: 'solid' | 'soft' | 'ghost'
  }

const {
  as = 'section',
  direction = 'column',
  variant,
  frame,
  align,
  ...rest
} = Astro.props
---

<Tag
  {as}
  {...rest}
  class:list={['full-section full-layout', direction, align, frame, variant]}
>
  <slot name="before" />
  <Children {...rest} />
  <slot />
  <slot name="after" />
</Tag>

<style is:global>
  .full-section {
    display: flex;
    position: relative;
    column-gap: var(--space-6);
    flex-direction: column;
    order: 0;
    background: var(--color-1);
    padding: var(--spacer) var(--gutter);
    overflow-x: hidden;

    /* &:first-child {
      margin-top: 0;
      padding-top: var(--space-6);
    } */

    &.reverse > *:first-child {
      order: 2;
    }

    &.switch:nth-child(even) > *:first-child {
      @media (min-width: 1024px) {
        order: 2;
      }
    }

    &.column {
      display: flex;
      flex-direction: column;
    }

    &.row {
      display: grid;
      align-items: center;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;

        .prose {
          grid-row: 2;
          grid-column: 1;
        }
      }
    }

    &.start {
      align-items: flex-start;
    }

    &.stretch {
      align-items: stretch;
    }

    &.center {
      align-items: center;
      text-align: center;

      > * > * {
        text-align: left;
      }
    }

    &.end {
      align-items: flex-end;
    }

    &.panel {
      margin: var(--space-6) var(--gutter);
      border-width: var(--border-width);
      border-color: var(--border-color);
      border-radius: var(--radius);
      border-radius: var(--radius-2);
      background: var(--color-background);
      padding: var(--space-5) var(--gutter);
      padding: 0;
    }

    &.screen {
      min-height: 100vh;
    }

    &.subtle {
      border-color: var(--color-6);
      background-color: var(--color-2);
    }

    &.solid {
      border-color: var(--color-9);
      background: var(--color-9);

      * {
        color: var(--color-fg);
      }

      .button.solid {
        border-color: var(--color-fg);
        background: var(--color-fg);
        color: var(--color-9);
      }

      .button.soft {
        border-color: var(--color-7);
        background: var(--color-6);
        color: var(--color-11);
      }

      /* .button.outline {
        border-color: var(--color-7) !important;
        color: var(--color-fg) !important;
      } */
    }
  }
</style>
