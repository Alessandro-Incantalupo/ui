---
import { z } from 'astro:content'
import { ectomorphic, endomorphic, getChildProps } from '../utils'
import Action, { zAction } from './Action.astro'
import Display, { zDisplay } from './Display.astro'
import Tag, { zTag } from './Tag.astro'

export const zComposite = endomorphic(
  'composite',
  // @ts-ignore
  zTag.merge(zAction).merge(zDisplay).extend({
    composite: z.string().nullish(),
    direction: z.string().nullish(),
    align: z.string().nullish(),
  })
)

type Props = z.infer<typeof zComposite>

const { direction, align, ...rest } = ectomorphic(
  'composite',
  zComposite,
  Astro.props
)
const child = getChildProps(rest)
---

<Tag
  class:list={['composite', direction, align]}
  {...rest}
>
  <Display
    {...child}
    {align}
  />
  <Action
    {align}
    {...child}
  />
  <slot />
</Tag>

<style is:global>
  .composite {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-4);
    z-index: 1;
    width: 100%;

    &.center {
      align-items: center;
    }

    &:is(.split .center) {
      align-items: flex-start;
    }

    /* FIXME */
    &:is(.card &:not(.image ~ .composite)) {
      height: 100%;
    }

    &:is(.panel &) {
      gap: 0;
      padding: var(--gutter);
    }

    &:is(.compact.panel &) {
      gap: var(--space-4);
      padding: var(--space-4);
    }

    &.stretch {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    &.row {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    &:where(.split .start) {
      @media (min-width: 1024px) {
        position: sticky;
        top: var(--space-5);
      }
    }
  }
</style>
