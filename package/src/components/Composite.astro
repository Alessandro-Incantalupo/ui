---
import { z } from 'astro:content'
import { schemas } from '../utils'
import Action, { macro as action } from './Action.astro'
import Display, { macro as display } from './Display.astro'
import Tag from './Tag.astro'

type Props = z.infer<typeof macro>

export const { macro, meso, micro } = schemas('composite', {
  ...display.shape,
  ...action.shape,
  composite: z.string().nullish(),
  direction: z.string().nullish(),
  align: z.string().nullish(),
})

const { direction, align, ...rest } = meso.parse(Astro.props)
---

<Tag
  class:list={['composite', direction, align]}
  {...rest}
>
  <Display {...micro.parse(rest)} />
  <Action {...micro.parse(rest)} />
  <slot />
</Tag>

<style is:global>
  .composite {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-4);
    z-index: 1;
    width: 100%;

    &.center {
      align-items: center;
    }

    &:is(.split .center) {
      align-items: flex-start;
    }

    /* FIXME */
    &:is(.card &:not(.image ~ .composite)) {
      height: 100%;
    }

    &:is(.panel &) {
      gap: 0;
      padding: var(--gutter);
    }

    &:is(.compact.panel &) {
      gap: var(--space-4);
      padding: var(--space-4);
    }

    &.stretch {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    &.row {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    &:where(.split .start) {
      @media (min-width: 1024px) {
        position: sticky;
        top: var(--space-5);
      }
    }
  }
</style>
