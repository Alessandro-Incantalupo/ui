---
import type { ComponentProps, HTMLTag } from 'astro/types'
import { buildProps, getChildProps, type BuildProps } from '../utils'
import Action from './Action.astro'
import Display from './Display.astro'
import Tag from './Tag.astro'

type Props<As extends HTMLTag = 'div'> = BuildProps<
  'composite',
  ComponentProps<typeof Tag<As>> &
    ComponentProps<typeof Display> &
    ComponentProps<typeof Action> & {
      direction?: 'column' | 'row' | null
      align?: 'start' | 'center' | null
    }
>

const { direction, align, ...rest } = buildProps('composite', Astro.props)
const child = getChildProps(rest)
---

<Tag
  class:list={['composite', direction, align]}
  {...rest}
>
  <Display
    {...child}
    {align}
  />
  <Action
    {align}
    {...child}
  />
  <slot />
</Tag>

<style is:global>
  .composite {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-4);
    z-index: 1;
    width: 100%;

    &.center {
      align-items: center;
    }

    &:is(.split .center) {
      align-items: flex-start;
    }

    /* FIXME */
    &:is(.card &:not(.image ~ .composite)) {
      height: 100%;
    }

    &:is(.panel &) {
      gap: 0;
      padding: var(--gutter);
    }

    &:is(.panel &.compact) {
      gap: var(--space-4);
      padding: var(--space-4);
    }

    &.stretch {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }

    &:where(.split .start) {
      @media (min-width: 1024px) {
        position: sticky;
        top: var(--space-5);
      }
    }
  }
</style>
