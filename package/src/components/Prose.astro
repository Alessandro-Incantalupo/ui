---
import { z } from 'zod';
import { componentSchema } from '../schemas/componentSchema';
import Component from './misc/Component.astro';

type Props = z.infer<typeof proseSchema>;

export const proseSchema = componentSchema({
  render: z.any(),
});

const { render, ...rest } = proseSchema.parse(Astro.props);
const Content = typeof render === 'function' ? (await render()).Content : null;
---

<Component
  class="prose"
  {...rest}
>
  {Content && <Content />}
</Component>

<style is:global>
  .prose {
    column-gap: var(--space-5);
    order: 3;
    column-width: 500px;
    column-count: auto;
    text-align: left;

    * {
      align-items: flex-start;

      margin-bottom: 0.5em;
      color: var(--sand12);
      font: var(--font);
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      /* FIXME */
      color: var(--hue12);
      font: var(--font);
      font-weight: 700;
      font-size: var(--text-6);
      line-height: 1.25;
    }

    h1 {
      font-size: var(--text-6);
    }
    h2 {
      font-size: var(--text-5);
    }
    h3 {
      font-size: var(--text-4);
    }
    h4 {
      font-size: var(--text-3);
    }
    h5 {
      font-size: var(--text-2);
    }
    h6 {
      font-size: var(--text-1);
    }

    :is(h1, h2, h3, h4, h5, h6) {
      --color: var(--hue12);

      margin-top: 2em;
      margin-bottom: 0.5em;
      color: var(--color);
    }

    :is(h1, h2, h3, h4, h5, h6):first-child {
      margin-top: 0;
    }

    * {
      break-inside: avoid-column;
    }

    ul {
      padding-left: 1.5em;
      list-style: disc;
    }
  }
</style>
