---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import Tag from '../_Tag.astro'
import ListItem from './ListItem.astro'

type Props<As extends HTMLTag = 'ul'> = Polymorphic<{ as: As }> &
  ComponentProps<typeof Tag> & {
    html?: string
    text?: string
    variant?: 'base' | 'muted' | 'accent'
    items?: (ComponentProps<typeof ListItem> | string)[]
  }

const { as = 'ul', items, ...rest } = Astro.props
---

<Tag
  class:list={['list']}
  {as}
  {...rest}
>
  {
    items?.map((item) => {
      if (typeof item === 'string') return <ListItem html={item} />
      else return <ListItem {...item} />
    })
  }
  <slot />
</Tag>

<style is:global lang="scss">
  .full.list {
    display: flex;
    flex-direction: column;
    padding-left: var(--space-4);
    color: var(--foreground);
    font-weight: var(--font-weight);
    font-size: var(--text-2);
    line-height: 1.625;
    font-family: var(--font-family);
    list-style-type: disc;
  }
</style>
