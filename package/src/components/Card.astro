---
import { getEntry } from 'astro:content'
import { merge } from 'merge-anything'
import { z } from 'zod'
import { buildProps, parseProps } from '../utils/props'
import { entryReference, getEntryByReference } from '../utils/reference'
import Composite, { composite } from './Composite.astro'
import Image, { image } from './Image.astro'
import Tag from './Tag.astro'
import { entrySchema } from '../schemas/entrySchema'

type Props = z.infer<typeof card>

export const card = buildProps({
  entry: entrySchema,
  composite,
  image,
  images: z.any().nullish(), // FIXME
  frame: z.enum(['fill', 'panel', 'screen']).nullish(),
  variant: z.enum(['ghost', 'soft', 'solid']).nullish(),
  collection: z.string().nullish(),
  slug: z.string().nullish(),
  output: z.boolean().nullish(),
  reference: entryReference,
})

const { entry, ...props } = parseProps(card, Astro.props)
const entryResponse = entry && (await getEntry(entry))
const baseLayout = await getEntry('layouts', 'index')
const collectionLayout = entry?.collection && (await getEntry('layouts', entry.collection))

const { variant, frame, output, ...rest } = merge(baseLayout?.data, collectionLayout?.data, entryResponse?.data, props)

const href =
  output !== false && entry?.collection && entry?.slug ? `/${entry?.collection}/${entry?.slug}` : undefined

const imageFromImages =
  typeof rest.images?.items?.[0] === 'string'
    ? { src: rest.images?.items?.[0] }
    : rest.images?.items?.[0]
---

<Tag
  class:list={['card', variant, frame]}
  compact
  as={href ? 'a' : 'div'}
  {href}
  {...rest}
>
  <Image
    {...imageFromImages}
    {...rest.image}
  />
  <Composite {...rest.composite} />
</Tag>
<style is:global>
  .card {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: stretch;
    gap: var(--space-4);
    overflow: hidden;

    .composite {
      justify-content: space-between;
      gap: var(--space-5);
      /* height: 100%; */
    }

    &:is(a) {
      transition: var(--transition);

      &:hover > .image {
        opacity: 0.85;
      }

      &:active {
        transform: scale(0.95);
      }
    }

    &.panel {
      gap: 0;
      border-radius: var(--radius-2);
      overflow: hidden;

      &:is(a) {
        &:hover {
          background: var(--hue3);
        }

        &:active {
          background: var(--hue4);
        }
      }

      &.soft {
        border-width: var(--border-width);
        border-color: var(--hue6);
        background-color: var(--hue2);

        &:is(a) {
          border-color: var(--hue7);
          background: var(--hue2);

          &:hover {
            border-color: var(--hue8);
            background: var(--hue3);
          }

          &:active {
            background: var(--hue4);
          }
        }

        .image {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }

      &.solid {
        border-color: var(--hue9);
        background: var(--hue9);

        * {
          color: var(--hue-fg);
        }

        &:is(a):hover {
          background: var(--hue10);
        }

        .image {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    &.landscape {
      aspect-ratio: 4/3;
      object-fit: cover;
    }

    &.square {
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    &.portrait {
      aspect-ratio: 3/4;
      object-fit: cover;
    }
  }
</style>
