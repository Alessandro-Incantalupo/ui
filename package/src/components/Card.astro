---
import type { CollectionEntry, ContentCollectionKey } from 'astro:content'
import { getEntry, z } from 'astro:content'
import { merge } from 'merge-anything'
import { morph } from '../utils'
import Composite, { macro as composite } from './Composite.astro'
import Image, { macro as image } from './Image.astro'
import Tag from './Tag.astro'

type Props = z.infer<typeof macro>

export const { macro, meso, micro } = morph('card', {
  card: z.undefined(), // FIXME needed, otherwise morph doesn't work
  ...composite.shape,
  image: image.shape.image,
  _image: image.shape._image,
  frame: z.enum(['fill', 'panel', 'screen']).nullish(),
  variant: z.enum(['ghost', 'soft', 'solid']).nullish(),
  collection: z.string().nullish(),
  slug: z.string().nullish(),
  output: z.boolean().nullish(),
})

const { collection, slug, output, ...props } = meso(Astro.props)
const entry =
  collection && slug
    ? ((await getEntry(
        collection as any,
        slug as any
      )) as CollectionEntry<ContentCollectionKey>)
    : undefined

const { variant, frame, ...rest } = merge(entry?.data, props)
const href =
  output !== false && collection && slug ? `/${collection}/${slug}` : undefined
---

<Tag
  class:list={['card', variant, frame]}
  compact
  as={href ? 'a' : 'div'}
  {href}
  {...rest}
>
  <Image {...micro(rest)} />
  <Composite {...micro(rest)} />
</Tag>
<style is:global>
  .card {
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: stretch;
    gap: var(--space-4);
    overflow: hidden;

    .composite {
      justify-content: space-between;
      gap: var(--space-5);
      /* height: 100%; */
    }

    &:is(a) {
      transition: var(--transition);

      &:hover > .image {
        opacity: 0.85;
      }

      &:active {
        transform: scale(0.95);
      }
    }

    &.panel {
      gap: 0;
      border-radius: var(--radius-2);
      overflow: hidden;

      &:is(a) {
        &:hover {
          background: var(--hue3);
        }

        &:active {
          background: var(--hue4);
        }
      }

      &.soft {
        border-width: var(--border-width);
        border-color: var(--hue6);
        background-color: var(--hue2);

        &:is(a) {
          border-color: var(--hue7);
          background: var(--hue2);

          &:hover {
            border-color: var(--hue8);
            background: var(--hue3);
          }

          &:active {
            background: var(--hue4);
          }
        }

        .image {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }

      &.solid {
        border-color: var(--hue9);
        background: var(--hue9);

        * {
          color: var(--hue-fg);
        }

        &:is(a):hover {
          background: var(--hue10);
        }

        .image {
          border-bottom-right-radius: 0;
          border-bottom-left-radius: 0;
        }
      }
    }

    &.landscape {
      aspect-ratio: 4/3;
      object-fit: cover;
    }

    &.square {
      aspect-ratio: 1/1;
      object-fit: cover;
    }

    &.portrait {
      aspect-ratio: 3/4;
      object-fit: cover;
    }
  }
</style>
