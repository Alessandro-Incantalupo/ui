---
import type { ComponentProps } from 'astro/types'
import { buildProps, getChildProps, type BuildProps } from '../utils'
import Links from './Links.astro'
import Specs from './Specs.astro'
import Tag from './Tag.astro'

interface Props
  extends BuildProps<'banner', Props, string>,
    Pick<ComponentProps<typeof Links>, 'links' | '_links'>,
    Pick<ComponentProps<typeof Specs>, 'specs' | '_specs'>,
    ComponentProps<typeof Tag> {
  position?: 'relative' | 'sticky' | 'fixed' | 'absolute'
  impact?: 'low' | 'medium' | 'high' | 'extreme'
  area?: 'default' | 'panel'
}

const {
  as = 'div',
  position,
  impact,
  area,
  ...rest
} = buildProps('banner', Astro.props)

const child = getChildProps(rest)
---

<Tag
  class:list={['banner', position, impact, area]}
  {as}
  {...rest}
>
  <Specs {...child} />
  <Links {...child} />
</Tag>

<style is:global>
  .banner {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--flow);
    z-index: 10;
    border-top-width: 0;
    border-right-width: 0;
    border-bottom-width: var(--border-width);
    border-left-width: 0;
    border-color: var(--border-color);
    background: var(--background);
    padding: var(--space-1) var(--gutter);

    &:where(.sticky) {
      position: sticky;
      top: 0;
    }

    &:where(.fixed) {
      position: fixed;
      top: 0;
      right: 0;
      left: 0;
    }

    &:where(.absolute) {
      position: absolute;
      top: 0;
      right: 0;
      left: 0;
    }

    &:where(.area) {
      margin: var(--space-2) var(--gutter);
      border-color: var(--border-color);
      border-radius: var(--radius);
      padding: var(--space-2) var(--space-2);
    }
  }
</style>
