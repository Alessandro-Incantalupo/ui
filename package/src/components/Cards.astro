---
import type { ComponentProps } from 'astro/types'
import type { CollectionEntry, ContentCollectionKey } from 'astro:content'
import { getCollection, z } from 'astro:content'
import { morph } from '../utils'
import Card, { macro as cardSchema } from './Card.astro'
import Tag from './Tag.astro'

type Props = z.infer<typeof macro>

export const { macro, meso, micro } = morph('cards', {
  layout: z
    .enum(['carousel', 'grid', 'masonry', 'row', 'panels', 'bento'])
    .nullish(),
  card: cardSchema.shape.card,
  _card: cardSchema.shape._card,
  cards: z.string().or(z.array(cardSchema.shape.card)).nullish(),
  // TODO [collectionKey]: entrySlug <<< toevoegen
})

let { cards, ...props } = meso(Astro.props)
const entries =
  typeof cards === 'string'
    ? ((await getCollection(cards as any)).map((entry: any) => entry.data) as
        | CollectionEntry<ContentCollectionKey>['data'][]
        | undefined)
    : undefined
cards = entries ?? (cards as ComponentProps<typeof Card>[])

const { card, _card, layout = 'grid', ...rest } = props
---

<Tag
  class:list={['cards', layout]}
  {...rest}
>
  {
    cards?.map((item) => (
      <Card
        {_card}
        {card}
        {...item}
      />
    ))
  }
</Tag>

<style is:global>
  .cards {
    position: relative;
    width: 100%;

    &.row {
      display: grid;
      row-gap: var(--space-4);

      @media (min-width: 1024px) {
        grid-auto-columns: 6fr 1fr;
        grid-auto-flow: column;

        > * {
          &:nth-child(2) {
            grid-column-start: 3;
          }
          &:nth-child(3) {
            grid-column-start: 5;
          }
          &:nth-child(4) {
            grid-column-start: 7;
          }
          &:nth-child(5) {
            grid-column-start: 9;
          }
          &:nth-child(6) {
            grid-column-start: 11;
          }
        }
      }
    }

    &.carousel {
      display: flex;
      position: relative;
      flex-direction: row;
      align-items: flex-start;
      gap: var(--space-3);
      margin: 0 calc(var(--gutter) * -1);
      padding: 0 var(--gutter) var(--space-3);
      width: 100vw;
      overflow-x: auto;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;

      > .card {
        /* TODO add multiple sizes */
        flex-grow: 0;
        flex-shrink: 0;
        width: calc(7 * var(--space-6));
        scroll-snap-align: center;
      }
    }

    &.grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      column-gap: var(--space-3);
      row-gap: var(--space-4);
    }

    &.masonry {
      column-gap: var(--space-3);
      flex-direction: column;
      align-items: flex-start;
      column-count: var(--columns);

      @media (min-width: 640px) {
        --columns: 2;
      }
      @media (min-width: 768px) {
        --columns: 3;
      }

      @media (min-width: 1024px) {
        --columns: 4;
      }

      & > :not([hidden]) ~ :not([hidden]) {
        --un-space-y-reverse: 0;
        break-inside: avoid-column;
        margin-top: var(--space-4);
        margin-bottom: var(--space-4);
      }
    }

    &.panels {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
      gap: var(--space-3);
    }

    &.bento {
      display: grid;
      grid-template-columns: 1fr;

      @media (min-width: 1024px) {
        grid-template-columns: 1fr 1fr 1fr;

        & > *:nth-child(2n) {
          grid-column-start: span 2;
        }
      }
    }
  }
</style>
