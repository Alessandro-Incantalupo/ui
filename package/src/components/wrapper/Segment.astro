---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import Wrapper from './_Wrapper.astro'

type Props<As extends HTMLTag = 'section'> = Polymorphic<{ as: As }> &
  ComponentProps<typeof Wrapper> & {
    structure?: 'column' | 'row' | 'spit'
    variant?: 'base' | 'raised' | 'primary'
    frame?: 'viewport' | 'panel'
    reverse?: true | 'odd' | 'even'
    align?: 'start' | 'center' | 'end'
  }

const {
  as = 'section',
  structure,
  reverse,
  variant,
  frame,
  ...rest
} = Astro.props
---

<Wrapper
  class:list={[
    'segment',
    {
      [`structure-${structure}`]: structure,
    },
  ]}
  {as}
  {...rest}
>
  <slot name="before" />
  <slot />
</Wrapper>

<style is:global lang="scss">
  :root,
  .full {
    --media: 1536px;
    --space-spacer: calc(var(--space-5) + 4vw);
    --space-gutter: max(4vw, calc((100vw - var(--media)) / 2));
  }

  .full.section {
    position: relative;
    gap: var(--space-6) var(--space-5);
    background: var(--background);
    padding: var(--space-spacer) var(--space-gutter);
    width: 100%;
    overflow-x: hidden;

    &.structure-column {
      display: flex;
      flex-direction: column;
    }

    &.structure-row {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
    }

    &.structure-split {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));

      // display: grid;
      // justify-content: var(--full-x);
      // align-items: var(--full-y);

      // @media (min-width: 1024px) {
      //   grid-auto-columns: 1fr;
      //   grid-auto-flow: column;
      // }
    }

    &.frame-panel {
      margin: var(--space-5) var(--space-gutter);
      border: 1px solid var(--border);
      border-radius: var(--radius-3);
      background-color: var(--background);
      padding: var(--space-5);
      width: auto;
      overflow: hidden;
    }

    .full.frame-viewport {
      height: auto;
      min-height: 100vh;
    }

    &.align-start {
      align-items: flex-start;
    }

    &.align-center {
      align-items: center;
    }

    &.align-end {
      align-items: flex-end;
    }
  }

  .full.reverse-true {
    --full-reverse: 1;
  }

  .full.reverse-even:nth-child(even) {
    --full-reverse: 1;
  }

  .full.reverse-odd:nth-child(odd) {
    --full-reverse: 1;
  }

  .full.reverse-even,
  .full.reverse-odd,
  .full.reverse-true {
    @media (min-width: 1024px) {
      > .full {
        order: 0;

        &:first-child {
          order: var(--full-reverse, 0);
        }

        &:last-child {
          order: calc(var(--full-reverse, 0) * -1);
        }
      }
    }
  }
</style>
