---
import { z } from 'zod'
import { propsSchema } from '../../schemas/componentSchema'
import Button from '../base/Button.astro'
import Checkbox from '../base/Checkbox.astro'
import Icon from '../base/Icon.astro'
import Image from '../base/Image.astro'
import Input from '../base/Input.astro'
import Label from '../base/Label.astro'
import Logo from '../base/Logo.astro'
import Media from '../base/Media.astro'
import Option from '../base/Option.astro'
import Rating from '../base/Rating.astro'
import Select from '../base/Select.astro'
import Spec from '../base/Spec.astro'
import Textarea from '../base/Textarea.astro'
import Video from '../base/Video.astro'
import Card from '../layout/Card.astro'
import Deck from '../layout/Deck.astro'
import Field from '../layout/Field.astro'
import Footer from '../layout/Footer.astro'
import Form from '../layout/Form.astro'
import Group from '../layout/Group.astro'
import Header from '../layout/Header.astro'
import Prose from '../layout/Prose.astro'
import Section from '../layout/Section.astro'
import Stack from '../layout/Stack.astro'
import Writeup from '../layout/Writeup.astro'
import Heading from '../typography/Heading.astro'
import Link from '../typography/Link.astro'
import Subtext from '../typography/Subtext.astro'
import Text from '../typography/Text.astro'
import Children from './Children.astro'
import Tag, { tagSchema } from './Tag.astro'

type Props = z.infer<typeof childSchema>

const COMPONENTS: any = {
  Heading,
  Text,
  Subtext,
  Writeup,
  Button,
  Card,
  Checkbox,
  Stack,
  Deck,
  Field,
  Footer,
  Form,
  Group,
  Header,
  Icon,
  Image,
  Input,
  Label,
  Link,
  Logo,
  Media,
  Option,
  Prose,
  Rating,
  Section,
  Select,
  Spec,
  Textarea,
  Video,
}

export const childSchema = propsSchema({
  component: z.string().optional(),
  key: z.string().optional(),
  as: tagSchema.shape.as.optional(),
}).passthrough()

const { key, component, as, ...rest } = childSchema.parse(Astro.props)

const keyToComponentName = (key: string) => {
  const part = key.split(/(?=[A-Z])/).pop() ?? key
  return part.charAt(0).toUpperCase() + part.slice(1)
}

const KeyComponent = key && COMPONENTS[keyToComponentName(key)]
const ComponentComponent = component && COMPONENTS[component]
const Component = KeyComponent || ComponentComponent
---

{
  Component && (
    <Component
      {as}
      {...rest}
    />
  )
}

{
  !Component && as && (
    <Tag
      {as}
      {...rest}
    >
      <Children {...rest} />
    </Tag>
  )
}
