---
import type { HTMLTag } from 'astro/types'

// type String = 'hello'
// type Cap = Capitalize<String>

// const components = {
//   Heading,
//   Paragraph,
// }

// type Components = typeof components

// type PrefixedComponents = {
//   [Key in keyof Components as `${string}${Key}`]: Components[Key]
// }

// type LowercaseComponents = {
//   [Key in keyof Components as Lowercase<Key>]: Components[Key]
// }

// type ExtendedComponents = Components & PrefixedComponents & LowercaseComponents

// const testcomp: AstroComponentFactory = Heading

type Props<As extends HTMLTag> = {
  as?: As
} & {
  [Key in As]?: 'good'
}

// type Props = {
//   children?: (keyof Components)[]
// } & {
//   [Key in keyof ExtendedComponents]?: ComponentProps<ExtendedComponents[Key]>
// }

// type Props<Children extends Record<string, any>> = {
//   children?: Children
// } & {
//   [Key in keyof Children]?: any
// }

// type Props<Children extends Record<string, any>> = {
//   children?: Children
// } & Children & {
//     [Key: string]: any
//   }

// const test: Props = {
//   Heading: {
//     color: 'lowered',
//   },
//   secondHeading: {
//     color: 'lowered',
//   },
//   Paragraph: {
//     color: 'base',
//   },
//   secondParagraph: {
//     color: 'lowered',
//   },
// }

// type ExtractComponentName<S> = S extends `${infer Prefix}${ComponentName}`
//   ? ComponentName
//   : never

// type SecondProps = {
//   [Key in `${string}${ComponentName}`]?: ComponentProps<
//     Components[ExtractComponentName<Key>]
//   >
// }

// type ChildProps<Name extends string, Value extends AstroGlobal[]> = {
//   [Key in
//     | keyof Name
//     | `${string}${Name}`
//     | Lowercase<Name>]?: ComponentProps<Value>
// }

// type ParagraphProps = ChildProps<'Paragraph', ComponentProps<typeof Paragraph>>

// const par: ParagraphProps = {
//   Paragraph: {
//     color: 'lowered',
//   },
// }

// type MyCoolType = ComponentProps<typeof isAstroComponentFactory>

// type ComponentName = 'Heading' | 'Paragraph'
// interface Components {
//   Heading: { color: string; size: number }
//   Paragraph: { color: string; length: number }
// }

// type ComponentProps<T> = T

// type ExtendedComponentName = ComponentName | `Custom${ComponentName}`

// type Props = {
//   [Key in ExtendedComponentName]?: ComponentProps<
//     Components[Extract<Key, ComponentName>]
//   >
// }

// type SecondProps = {
//   [Key in `${infer}${ComponentName}`]?: Key extends ComponentName
//     ? ComponentProps<Components[Key]>
//     : never
// }

// const test: Props = {
//   Heading: {
//     color: 'lowered',
//   },
// }

// const test2: SecondProps = {
//   myHeading: {
//     color: 'test',
//   },
// }

// type ParagraphProps = ComponentProps<Components['Paragraph']>

// const { ...rest } = unflatten(Astro.props) as typeof Astro.props

// const keyToComponentName = (key?: string) => {
//   if (!key) return
//   const part = key.split(/(?=[A-Z])/).pop() ?? key
//   const correctedPart = part.charAt(0).toUpperCase() + part.slice(1)
//   if (correctedPart && correctedPart in COMPONENTS)
//     return correctedPart as keyof typeof COMPONENTS
//   return
// }
---

{
  //   Object.entries(rest).map(([key, value]) => {
  //     if (key === 'text') return value
  //     if (key === 'html') {
  //       if (!value) return null
  //       const $ = cheerio.load(value, null, false)
  //       $('h1,h2,h3,h4,h5,h6').addClass('full-heading full-tag')
  //       $('p').addClass('full-paragraph full-tag')
  //       const html = $.html()
  //       return <Fragment set:html={html} />
  //     }
  //     if (isArray(value)) {
  //       const object = value.reduce((acc, v, i) => ({ ...acc, [i]: v }), {})
  //       return <Astro.self {...object} />
  //     }
  //     if (value.component && value.component in COMPONENTS) {
  //       const component = value.component as keyof typeof COMPONENTS
  //       const Component = component && COMPONENTS[component]
  //       return <Component {...value} />
  //     }
  //     if (keyToComponentName(key)) {
  //       const component = keyToComponentName(key) as keyof typeof COMPONENTS
  //       const Component = component && COMPONENTS[component]
  //       return <Component {...value} />
  //     }
  //     if (value.as)
  //       return (
  //         <Tag {...value}>
  //           <Astro.self {...value} />
  //         </Tag>
  //       )
  //     if (isObject(value)) return <Astro.self {...value} />
  //     return null
  //   })
  // }
  // <style></style>
}
