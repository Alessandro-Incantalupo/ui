---
import type { HTMLTag, Polymorphic } from 'astro/types'
import '../../css/main.css'
import { attributesSchema } from '../../schemas/attributesSchema'

type Props<As extends HTMLTag = 'div'> = Omit<
  Polymorphic<{ as: As }>,
  'slot'
> & {
  if?: any
  theme?: 'light' | 'dark'
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'
  compact?: boolean
}

const {
  as: As = 'div',
  if: ifProp,
  theme,
  size,
  compact,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasSlot = slot?.trim().length > 0
---

{
  (hasSlot || ifProp) && (
    <As
      class:list={[
        'full-tag',
        {
          [`full-theme-${theme}`]: theme,
          [`full-size-${size}`]: size,
          [`full-compact`]: compact,
        },
      ]}
      {...attributesSchema.parse(rest)}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global lang="scss">
  .full-tag {
    margin: 0;
    padding: 0;
  }
</style>
