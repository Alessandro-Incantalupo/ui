---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { attributesSchema } from '../../schemas/attributesSchema'

type Props<As extends HTMLTag> = Omit<Polymorphic<{ as: As }>, 'slot'> & {
  if?: any
  color?: string
  scheme?: string
  contrast?: boolean
  compact?: boolean
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'
  variant?: 'primary' | 'secondary' | 'raised' | 'lowered' | 'accent'
}

const {
  as: As = 'div',
  if: ifProp,
  color,
  variant,
  scheme,
  contrast,
  size,
  compact,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasSlot = slot?.trim().length > 0
---

{
  (hasSlot || ifProp) && (
    <As
      class:list={[
        { compact, contrast, scheme },
        color ? `color-${color}` : '',
        size ? `size-${size}` : '',
        scheme ? `scheme-${scheme}` : '',
        scheme,
        variant,
      ]}
      {...attributesSchema.parse(rest)}
    >
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global>
  &.scheme-dark,
  .dark {
    color-scheme: dark;
  }
  &.scheme-light,
  .light {
    color-scheme: light;
  }
</style>
