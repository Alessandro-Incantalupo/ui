---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { attributesSchema } from '../../schemas/attributesSchema'

type Props<As extends HTMLTag> = Omit<Polymorphic<{ as: As }>, 'slot'> & {
  if?: any
  color?: string
  scheme?: string
  contrast?: boolean
  compact?: boolean
  size?: '1' | '2' | '3' | '4' | 1 | 2 | 3 | 4
}

const {
  as: As = 'div',
  if: ifProp,
  color,
  scheme,
  contrast,
  size,
  compact,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasSlot = slot?.trim().length > 0
---

{
  (hasSlot || ifProp) && (
    <As
      class:list={[
        { compact, contrast },
        color ? `hue-${color}` : '',
        size ? `size-${size}` : '',
        scheme,
      ]}
      {...attributesSchema.parse(rest)}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
