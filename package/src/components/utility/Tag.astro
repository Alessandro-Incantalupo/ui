---
import { z } from 'zod'
import { attributesSchema } from '../../schemas/attributesSchema'

type Props = z.infer<typeof parentSchema>

export const parentSchema = z.object({}).catchall(z.any())

const {
  as: As = 'div',
  if: ifProp,
  color,
  scheme,
  contrast,
  order,
  size,
  compact,
  ...rest
} = parentSchema.parse(Astro.props)

const slot = await Astro.slots.render('default')
const hasSlot = slot?.trim().length > 0
---

{
  (hasSlot || ifProp) && (
    <As
      style={order ? `order:${order};` : ''}
      class:list={[
        { compact, contrast },
        color ? `hue-${color}` : '',
        size ? `size-${size}` : '',
        scheme,
      ]}
      {...attributesSchema.parse(rest)}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
