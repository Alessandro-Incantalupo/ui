---
import type { HTMLAttributes, HTMLTag } from 'astro/types'

type Props<As extends HTMLTag> = {
  as?: As
  slot?: any
  if?: 'content' | any
  [key: string | number | symbol]: any
}

const {
  as: As = 'div',
  if: ifProp = 'content',
  theme,
  compact,
  variant,
  density,
  size,
  align,
  position,
  frame,
  ratio,
  contrast,
  structure,
  text,
  html,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = (str?: string) =>
  typeof str === 'string' && str.trim().length > 0
const render =
  ifProp == 'content'
    ? hasContent(slot) || hasContent(html) || hasContent(text)
    : ifProp
---

{
  render && (
    <As
      class:list={[
        'full',
        {
          compact,
          contrast,
          [`theme-${theme}`]: theme,
          [`variant-${variant}`]: variant,
          [`density-${density}`]: density,
          [`structure-${structure}`]: structure,
          [`size-${size}`]: size,
          [`align-${align}`]: align,
          [`position-${position}`]: position,
          [`frame-${frame}`]: frame,
          [`ratio-${ratio}`]: ratio,
        },
      ]}
      {...rest}
    >
      <Fragment set:text={text} />
      <Fragment set:html={html} />
      <Fragment set:html={slot} />
    </As>
  )
}

<style is:global lang="scss">
  @import '../css/utils.scss';
  @import '../css/color.css';
  @import '../css/styles.css';
  @import '../css/size.css';

  @include component('full') {
    z-index: 0;
    box-sizing: border-box;
  }
</style>
