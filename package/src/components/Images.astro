---
import type { ComponentProps } from 'astro/types'
import { buildProps, type BuildProps } from '../utils'
import Button from './Button.astro'
import Image from './Image.astro'
import Media from './Media.astro'

interface Base {
  images?: ComponentProps<typeof Image>['image'][]
}

type Props = BuildProps<Base, 'images'>
const props = buildProps(Astro, 'images')

const { images } = props
---

{
  images && (
    <>
      <div class="container">
        <Button
          icon="chevron-left"
          class="prev"
          look="soft"
          hue="base"
        />
        <div class="carousel large">
          {images.map((image) => (
            // <Image {image} />
            // <Video></Video>
            <Media {image} />
          ))}
        </div>
        <Button
          icon="chevron-right"
          class="next"
          look="soft"
          hue="base"
        />
        <div class="carousel small">
          {images.map((image) => (
            // <div class="carousel-item small">
            <Media
              thumbnail={true}
              {image}
            />

            // <Image {image} />
            // </div>
          ))}
        </div>
      </div>
    </>
  )
}

<script>
  const largeCarousel = document.querySelector('.carousel.large')
  const smallItems = document?.querySelectorAll('.carousel.small>*')

  smallItems?.forEach((item, i) => {
    item.addEventListener('click', () => {
      largeCarousel?.scrollTo({
        left: largeCarousel.clientWidth * i,
        behavior: 'smooth',
      })
    })
  })

  const prevButton = document.querySelector('.button.prev')
  const nextButton = document.querySelector('.button.next')

  prevButton?.addEventListener('click', () => {
    largeCarousel?.scrollBy({
      left: -largeCarousel.clientWidth,
      behavior: 'smooth',
    })
  })

  nextButton?.addEventListener('click', () => {
    largeCarousel?.scrollBy({
      left: largeCarousel.clientWidth,
      behavior: 'smooth',
    })
  })
</script>

<style is:global>
  .container {
    display: flex;
    position: relative;
    flex-direction: column;
    border: 1px solid var(--hue4);
    border-bottom-width: 0;
    background: var(--hue2);
    width: 100%;

    .carousel {
      display: flex;
      position: relative;
      width: 100%;
      overflow-x: scroll;
      scroll-behavior: smooth;
      scroll-snap-type: x mandatory;

      .image {
        display: flex;
        flex: none;
        box-sizing: content-box;
        width: 100%;
        height: 100%;
        object-fit: contain;
        scroll-snap-align: start;
      }

      &.large {
        align-items: center;
        aspect-ratio: 1/1;
      }

      &.small {
        gap: var(--space-2);
        padding: var(--space-2) 0;
        height: var(--space-6);

        img,
        iframe {
          align-self: stretch;
          width: auto;
          height: 100%;
          object-fit: contain;
          scroll-snap-align: start;

          &:hover {
            opacity: 0.75;
            cursor: pointer;
          }
        }
      }
    }
    .button {
      position: absolute;
      top: 35%;
      opacity: 50%;
      z-index: 1;
      border-radius: var(--radius-1);
      padding: var(--space-2);

      &:hover {
        opacity: 100%;
      }

      &.prev {
        left: var(--space-2);
      }

      &.next {
        right: var(--space-2);
      }
    }
  }

  /* .large,
  .small {
    display: flex;
    gap: var(--space-1);
    padding-bottom: var(--space-1);
    width: 100%;
    overflow-x: scroll;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
  } */

  /* .small {
    gap: var(--space-1);
    padding-top: var(--space-1);
    padding-bottom: var(--space-1);
  } */

  /* img {
    border-radius: var(--radius);
    object-fit: contain;
  } */

  /* .large > :global(img) {
    width: 100%;
    scroll-snap-align: start;
  } */

  /* .small > :global(img) {
    transition: var(--transition);
    cursor: pointer;
    width: 20%;
    scroll-snap-align: start;

    &:hover {
      opacity: 0.75;
    }
  }

  .small {
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: 0px;
    order: 10; */
  /* } */

  /* input {
    display: none;
  }

  label:checked {
    border: 4px solid red;
  } */
</style>
