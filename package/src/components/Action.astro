---
import { z } from 'astro:content'
import { ectomorphic, endomorphic, getChildProps } from '../utils'
import Buttons, { zButtons } from './Buttons.astro'
import Tag, { zTag } from './Tag.astro'

export const zAction = endomorphic(
  'action',
  // @ts-ignore
  zTag.merge(zButtons).extend({
    action: z.string().nullish(),
    align: z.string().nullish(),
  })
)

// interface Props
//   extends Endomorphic<Props, 'action'>,
//     ComponentProps<typeof Tag>,
//     // Pick<ComponentProps<typeof Form>, 'form' | '_form'>,
//     // ComponentProps<typeof Product>,
//     Pick<ComponentProps<typeof Buttons>, 'buttons' | '_buttons'> {
//   align?: 'start' | 'center' | null
// }

type Props = z.infer<typeof zAction>

const { ...rest } = ectomorphic('buttons', zAction, Astro.props)
const child = getChildProps(rest)
---

<Tag
  class="action"
  {...rest}
>
  <!-- {props.price ? <Product {...rest} /> : <Form {...(rest as any)} />} -->
  <Buttons {...child} />
  <slot />
</Tag>

<style is:global>
  .action {
    display: flex;
    flex-direction: column;
    gap: var(--space-3);
  }
</style>
