---
<<<<<<< HEAD
// TODO: convert naar zod
import { z } from 'astro:content'
import { morph } from '../utils'
import { getChildProps } from '../utils'
import Checkbox, { macro as checkbox } from './Checkbox.astro'
import Input, { macro as input } from './Input.astro'
import Label, { macro as label } from './Label.astro'
=======
import type { ComponentProps } from 'astro/types'
import { endomorphic, getChildProps, type Endomorphic } from '../utils'
import Checkbox from './Checkbox.astro'
import Input from './Input.astro'
import Label from './Label.astro'
import Options from './Options.astro'
>>>>>>> lenard-branch
import Tag from './Tag.astro'
import Textarea, { macro as textarea } from './Textarea.astro'

type Props = z.infer<typeof macro>

export const { macro, meso, micro } = morph('link', {
  label: label.shape.label,
  _label: label.shape._label,
  checkbox: checkbox.shape.checkbox,
  _checkbox: checkbox.shape._checkbox,
  textarea: textarea.shape.textarea,
  _textarea: textarea.shape._textarea,
  input: input.shape.input,
  _input: input.shape._input,
  link: z.string().nullish(),
  href: z.string().nullish(),
})

const { as = 'div', ...rest } = meso(Astro.props)
const child = getChildProps(rest)
---

<Tag
  class:list={['field', { ...micro(checkbox) }]}
  {...rest}
>
  <Checkbox
    {...micro(checkbox)}
    {...child}
  />
  <Label {...child} />
  <Textarea {...child} />
  <Input {...child} />
  <slot />
</Tag>

<style is:global>
  .field {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    gap: var(--space-1);
    width: 100%;

    &.checkbox {
      flex-direction: row !important;
      align-items: center !important;
      gap: var(--space-2) !important;
    }

    &.has-checkbox {
      flex-direction: row-reverse;
      justify-content: flex-end;
      align-items: center;
      gap: var(--space-2);
      padding: var(--space-1) 0;
    }
  }
</style>
