---
// TODO: convert naar zod
import type { ComponentProps } from 'astro/types'
import merge from 'deepmerge'
import {
  getChildProps,
  getEntryByProps,
  macromorphic,
  type Endomorphic,
  type EntryReference,
} from '../utils'
import Cards from './Cards.astro'
import Composite from './Composite.astro'
import Icon from './Icon.astro'
import Image from './Image.astro'
import Prose from './Prose.astro'
import Tag from './Tag.astro'

interface BaseProps
  extends ComponentProps<typeof Tag>,
    ComponentProps<typeof Composite>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'>,
    Pick<ComponentProps<typeof Prose>, 'prose' | '_prose'>,
    Pick<ComponentProps<typeof Cards>, 'cards' | '_cards'>,
    Pick<ComponentProps<typeof Prose>, 'prose' | '_prose'>,
    Pick<ComponentProps<typeof Icon>, 'icon' | '_icon'> {
  direction?: 'row' | 'column' | null
  align?: 'start' | 'center' | null
  look?: 'solid' | 'soft' | 'ghost' | null
  frame?: 'screen' | 'panel' | null
}

type Props = EntryReference & Endomorphic<BaseProps, 'section'>

const props = macromorphic(Astro.props, 'section')
const entry = await getEntryByProps(props as any)
const merged = merge(entry?.data, props)

const { as = 'section', direction = 'column', frame, align, ...rest } = merged
const child = getChildProps(rest)
---

<Tag
  {as}
  {...rest}
  class:list={['section', direction, align, frame]}
>
  <Composite {...child} />
  <Image {...child} />
  <Cards {...child} />
  <Prose {...child} />
  <slot />
</Tag>

<style is:global>
  .section {
    display: flex;
    position: relative;
    flex-direction: column;
    gap: var(--space-6);
    background: var(--hue1);
    padding: var(--space-7) var(--gutter);
    overflow-x: hidden;

    /* &:first-child {
      margin-top: 0;
      padding-top: var(--space-5);
    } */

    &.reverse > *:first-child {
      order: 2;
    }

    &.switch:nth-child(even) > *:first-child {
      @media (min-width: 1024px) {
        order: 2;
      }
    }

    &.column {
      display: flex;
      flex-direction: column;
    }

    &.row {
      display: grid;
      align-items: center;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;

        .prose {
          grid-row: 2;
          grid-column: 1;
        }
      }
    }

    &.start {
      align-items: flex-start;
    }

    &.stretch {
      align-items: stretch;
    }

    &.center {
      align-items: center;
    }

    &.panel {
      margin: var(--space-6) var(--gutter);
      border-width: var(--border-width);
      border-color: var(--border-color);
      border-radius: var(--radius);
      border-radius: var(--radius-2);
      background: var(--background);
      padding: var(--space-5) var(--gutter);
      padding: 0;
    }

    &.screen {
      min-height: 100vh;
    }

    &.soft {
      border-color: var(--hue6);
      background-color: var(--hue2);
    }

    &.solid {
      border-color: var(--hue9);
      background: var(--hue9);

      * {
        color: var(--hue-fg);
      }

      .button.solid {
        border-color: var(--hue-fg);
        background: var(--hue-fg);
        color: var(--hue9);
      }

      .button.soft {
        border-color: var(--hue7);
        background: var(--hue3);
        color: var(--hue11);
      }
    }
  }
</style>
