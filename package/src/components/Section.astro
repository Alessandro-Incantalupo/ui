---
import type { CollectionEntry, ContentCollectionKey } from 'astro:content'
import { getEntry, z } from 'astro:content'
import merge from 'deepmerge'
import { card } from './Card.astro'
import Cards, { cards } from './Cards.astro'
import Composite, { composite } from './Composite.astro'
import Image, { image } from './Image.astro'
import Prose, { prose } from './Prose.astro'
import Tag, { tag } from './Tag.astro'

type Props = z.infer<typeof section>

export const section = tag.extend({
  composite,
  image,
  prose,
  cards,
  card,
  direction: z.enum(['row', 'column']).nullish(),
  frame: z.enum(['screen', 'panel']).nullish(),
  variant: z.enum(['solid', 'soft', 'ghost']).nullish(),
  align: z.enum(['start', 'center']).nullish(),
  collection: z.string().nullish(),
  slug: z.string().nullish(),
})

const { collection, slug, ...props } = section.parse(Astro.props)
const entry =
  collection && slug
    ? ((await getEntry(
        collection as any,
        slug as any
      )) as CollectionEntry<ContentCollectionKey>)
    : undefined

const {
  as = 'section',
  direction = 'column',
  variant,
  frame,
  align,
  ...rest
} = merge(entry?.data, props)
---

<Tag
  {as}
  {...rest}
  class:list={['section', direction, align, frame, variant]}
>
  <Composite {...rest.composite} />
  <Image {...rest.image} />
  <Cards {...rest.cards} />
  <Prose {...rest.prose} />
  <slot />
</Tag>

<style is:global>
  .section {
    display: flex;
    position: relative;
    flex-direction: column;
    order: 0;
    gap: var(--space-6) var(--spacer);
    background: var(--hue1);
    padding: var(--spacer) var(--gutter);
    overflow-x: hidden;

    /* &:first-child {
      margin-top: 0;
      padding-top: var(--space-5);
    } */

    &.reverse > *:first-child {
      order: 2;
    }

    &.switch:nth-child(even) > *:first-child {
      @media (min-width: 1024px) {
        order: 2;
      }
    }

    &.column {
      display: flex;
      flex-direction: column;
    }

    &.row {
      display: grid;
      align-items: center;

      @media (min-width: 1024px) {
        grid-auto-columns: 1fr;
        grid-auto-flow: column;

        .prose {
          grid-row: 2;
          grid-column: 1;
        }
      }
    }

    &.start {
      align-items: flex-start;
    }

    &.stretch {
      align-items: stretch;
    }

    &.center {
      align-items: center;
    }

    &.panel {
      margin: var(--space-6) var(--gutter);
      border-width: var(--border-width);
      border-color: var(--border-color);
      border-radius: var(--radius);
      border-radius: var(--radius-2);
      background: var(--background);
      padding: var(--space-5) var(--gutter);
      padding: 0;
    }

    &.screen {
      min-height: 100vh;
    }

    &.soft {
      border-color: var(--hue6);
      background-color: var(--hue2);
    }

    &.solid {
      border-color: var(--hue9);
      background: var(--hue9);

      * {
        color: var(--hue-fg);
      }

      .button.solid {
        border-color: var(--hue-fg);
        background: var(--hue-fg);
        color: var(--hue9);
      }

      .button.soft {
        border-color: var(--hue7);
        background: var(--hue3);
        color: var(--hue11);
      }
    }
  }
</style>
