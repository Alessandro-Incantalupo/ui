---
// import type { ComponentProps, HTMLAttributes } from 'astro/types'
// import { endomorphic, getChildProps, type Endomorphic } from '../utils'
// import Icon from './Icon.astro'
// import Tag from './Tag.astro'

// interface Props
//   extends Endomorphic<Props, 'button', string>,
//     ComponentProps<typeof Tag>,
//     Pick<ComponentProps<typeof Icon>, 'icon' | '_icon'> {
//   href?: HTMLAttributes<'a'>['href']
// }

import { z } from 'astro:content'
import { endomorphic, getChildProps } from '../utils'
import Icon from './Icon.astro'
import Tag, { zTag } from './Tag.astro'

export const zButton = zTag.extend({
  button: z.string().nullish(),
  href: z.string().nullish(),
})

type Props = z.infer<typeof zButton>

const {
  as = 'a',
  variant = 'solid',
  button,
  ...rest
} = endomorphic(Astro.props, 'button')
const child = getChildProps(rest)
---

<Tag
  class:list={['button']}
  {variant}
  {as}
  {...rest}
>
  <Icon {...child} />
  <Fragment set:html={button} />
  <slot />
</Tag>

<style is:global>
  .button {
    display: inline-flex;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    vertical-align: top;
    gap: var(--space-2);
    transition: var(--transition);
    cursor: pointer;
    border-radius: var(--radius-2);
    background: var(--button-background);
    padding: 0 var(--space-3);
    min-width: var(--space-6);
    height: var(--space-6);
    color: var(--button-color);
    font-size: var(--text-2);
    line-height: 1;
    user-select: none;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    &:focus-visible {
      outline: 2px solid var(--hue8);
      outline-offset: 2px;
    }

    &.variant-solid,
    &.variant-soft,
    &.variant-outline,
    &.variant-surface,
    &.variant-ghost {
      box-shadow: inset 0 0 0 var(--border-width) var(--button-border);
      background-color: var(--button-background);
      color: var(--button-color);

      &:hover {
        box-shadow: inset 0 0 0 var(--border-width)
          var(--button-border-hover, var(--button-border));
        background-color: var(
          --button-background-hover,
          var(--button-background)
        );
      }

      &:active {
        background-color: var(
          --button-background-active,
          var(--button-background-hover, var(--button-background))
        );
      }

      &.contrast {
        --button-color: var(--hue12);
      }
    }

    &.variant-solid {
      --button-background: var(--hue9);
      --button-background-hover: var(--hue10);
      --button-color: var(--hue-fg);

      &.contrast {
        --button-background: var(--hue12);
        --button-background-hover: var(--hue12);
        --button-color: var(--hue1);
      }
    }

    &.variant-soft {
      --button-background: var(--hue3);
      --button-background-hover: var(--hue4);
      --button-background-active: var(--hue5);
      --button-color: var(--hue11);
    }

    &.variant-surface {
      --button-background: var(--hue2);
      --button-background-hover: var(--hue3);
      --button-background-active: var(--hue4);
      --button-color: var(--hue11);
      --button-border: var(--hue7A);
      --button-border-hover: var(--hue8A);
    }

    &.variant-outline {
      --button-background-hover: var(--hue2);
      --button-background-active: var(--hue3);
      --button-color: var(--hue11);
      --button-border: var(--hue7A);
      --button-border-hover: var(--hue8A);
    }

    &.variant-ghost {
      --button-background-hover: var(--hue2);
      --button-background-active: var(--hue3);
      --button-color: var(--hue11);
    }
  }
</style>
