---
import type { ComponentProps } from 'astro/types'
import { isString } from 'remeda'
import Component from '../_Component.astro'
import Component from '../_Component.astro'

interface Props extends ComponentProps<typeof Component> {
  position?: 'background' | 'cover' | 'panel'
  frame?: 'inset'
}

function getAltBySrc(): string {
  if (!isString(Astro.props.src)) return ''
  const filename = Astro.props.src?.split('/').pop()
  const slug = filename && filename.split('.')[0]
  const unslugged = slug?.replace(/-/g, ' ')
  return unslugged || ''
}

const {
  as = 'img',
  loading = 'lazy',
  alt = getAltBySrc(),
  src = Astro.props.html,
  position,
  frame,
  ...rest
} = Astro.props

// function getSrc() {
//   if (src?.startsWith('http')) return src
//   // TODO: add eager import
//   const images = Astro.glob('/src/assets/**/*.{jpeg,jpg,png,webp,gif}', {
//     eager: true,
//   })
//   const path = ('/src/assets/' + src).replace('//', '/')
//   const image = images[path]
//   if (!image) console.warn(`Image not found: ${path}`)
//   else return image
// }

// function getSizes() {
//   const mapped = Object.entries(sizes).map(([key, value]) => {
//     if (key === 'base') return value
//     if (key === 'sm') return `(min-width: 640px) ${value}`
//     if (key === 'md') return `(min-width: 768px) ${value}`
//     if (key === 'lg') return `(min-width: 1024px) ${value}`
//     if (key === 'xl') return `(min-width: 1280px) ${value}`
//     if (key === '2xl') return `(min-width: 1536px) ${value}`
//   })
//   const joined = mapped.join(', ')
//   return joined
// }
---

{
  src && (
    <Component
      class:list={['image']}
      if={src}
      {src}
      {alt}
      {as}
      {frame}
      {position}
      {...rest}
    />
  )
}

<style is:global lang="scss">
  @import '../../css/utils.scss';
  @import '../../css/color.css';
  @import '../../css/props/frame.scss';
  @import '../../css/props/variant.scss';
  @import '../../css/props/structure.scss';
  @import '../../css/props/align.scss';

  @include component('image') {
    display: block;
    border-radius: var(--radius-1);
    width: 100%;
    height: auto;
    object-fit: cover;

    &.mask-sm {
      -webkit-mask-image: linear-gradient(to top, transparent 0%, black 30%);
      mask-image: linear-gradient(to top, transparent 0%, black 30%);
    }

    &.mask {
      -webkit-mask-image: linear-gradient(to top, transparent 0%, black 100%);
      mask-image: linear-gradient(to top, transparent 0%, black 100%);
    }
  }
</style>
