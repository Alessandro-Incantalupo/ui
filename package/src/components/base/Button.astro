---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import Tag from '../_Tag.astro'
import Icon from './Icon.astro'

type Props<As extends HTMLTag = 'a'> = Polymorphic<{ as: As }> &
  ComponentProps<typeof Tag> & {
    html?: string
    text?: string
    variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'link'
    icon?: ComponentProps<typeof Icon> | ComponentProps<typeof Icon>['name']
  }

const {
  as = 'a',
  variant = 'solid',
  contrast = true,
  icon,
  ...rest
} = Astro.props
---

<Tag
  class:list={['button']}
  {as}
  {variant}
  {contrast}
  {...rest}
>
  <slot />
  {typeof icon === 'string' ? <Icon name={icon} /> : <Icon {...icon} />}
</Tag>

<style is:global lang="scss">
  @import '../../css/utils.scss';

  @include component('button') {
    display: inline-flex;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    vertical-align: top;
    gap: var(--space-2);
    transition: background-color var(--transition);
    cursor: pointer;
    outline: none !important;
    border: none;
    border-radius: var(--radius-1);
    background-color: var(--background);
    padding-right: var(--element-3);
    padding-left: var(--element-3);
    height: calc(var(--label) + 2 * var(--element-3));
    color: var(--base-text);
    font-weight: var(--button-font-weight);
    font-size: var(--label);
    line-height: 1.625;
    font-family: var(--button-font-family);
    text-align: center;
    text-decoration: none;
    white-space: nowrap;

    &:focus-visible {
      outline: 2px solid var(--focus) !important;
      outline-offset: 2px;
    }

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    &.variant-solid {
      background-color: var(--base-solid);
      color: var(--base-text-contrast);

      &:hover {
        background-color: var(--base-solid-hover);
      }

      &.contrast {
        background-color: var(--base-solid-contrast);
        color: var(--base-background);
      }
    }

    &.variant-soft,
    &.variant-surface,
    &.variant-outline,
    &.variant-ghost {
      color: var(--base-text);

      &:hover {
        background-color: var(--base-background-hover);
      }

      &:active {
        background-color: var(--base-background-active);
      }

      &.contrast {
        color: var(--base-text-contrast);
      }
    }

    &.variant-soft {
      background-color: var(--base-background-element);
    }

    &.variant-surface {
      box-shadow: inset 0 0 0 1px var(--base-border-element);
      background-color: var(--base-background-element);

      &:hover {
        box-shadow: inset 0 0 0 1px var(--base-border-hover);
      }
    }

    &.variant-outline {
      box-shadow: inset 0 0 0 1px var(--base-border-element);

      &:hover {
        box-shadow: inset 0 0 0 1px var(--base-border-hover);
      }
    }

    &.variant-ghost {
    }

    &.variant-link {
      padding: 0;
    }
  }
</style>

<!-- .dark, .dark-theme {
  --gray-1: #111113;
  --gray-2: #19191b;
  --gray-3: #222325;
  --gray-4: #292a2e;
  --gray-5: #303136;
  --gray-6: #393a40;
  --gray-7: #46484f;
  --gray-8: #5f606a;
  --gray-9: #6c6e79;
  --gray-10: #797b86;
  --gray-11: #b2b3bd;
  --gray-12: #eeeef0;

  --gray-a1: #1111bb03;
  --gray-a2: #cbcbf90b;
  --gray-a3: #d6e2f916;
  --gray-a4: #d1d9f920;
  --gray-a5: #d7ddfd28;
  --gray-a6: #d9defc33;
  --gray-a7: #dae2fd43;
  --gray-a8: #e0e3fd60;
  --gray-a9: #e0e4fd70;
  --gray-a10: #e3e7fd7e;
  --gray-a11: #eff0feb9;
  --gray-a12: #fdfdffef;

  --gray-contrast: #FFFFFF;
  --gray-surface: rgba(0, 0, 0, 0.05);
  --gray-indicator: #6c6e79;
  --gray-track: #6c6e79;
} -->
