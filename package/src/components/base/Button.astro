---
import type { ComponentProps, HTMLTag, Polymorphic } from 'astro/types'
import type { Childmorphic } from '../../types/Childmorphic'
import Children from '../_Children.astro'
import Tag from '../_Tag.astro'
import type Icon from './Icon.astro'

type Props<As extends HTMLTag = 'a'> = Polymorphic<{ as: As }> &
  ComponentProps<typeof Tag> &
  Childmorphic<{
    html: string
    text: string
    variant?: 'primary' | 'secondary' | 'ghost'
    icon: ComponentProps<typeof Icon> | ComponentProps<typeof Icon>['name']
  }>

// TODO: variants: link, filled, outline, ghost. Deze zijn independent van de color prop. Betekent dus dat je een outline variant hebt van elke color.
// Let wel op, dit werkt niet met de Primary variant, omdat deze kleuren dan niet kloppen.

const { as = 'a', variant = 'primary', ...rest } = Astro.props
---

<Tag
  class:list={['full-button']}
  {as}
  {variant}
  {...rest}
>
  <slot name="before" />
  <Children {...rest} />
  <slot />
</Tag>

<style is:global lang="scss">
  .full-button {
    display: inline-flex;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    vertical-align: top;
    gap: var(--space-2);
    transition: background-color var(--full-transition);
    cursor: pointer;
    outline: none !important;
    box-shadow: inset 0 0 0 1px var(--border);
    border: none;
    border-radius: var(--full-border-radius-2);
    background-color: var(--background);
    padding-right: var(--space-element-3);
    padding-left: var(--space-element-3);
    height: calc(var(--text-element) + 2 * var(--space-element-3));
    color: var(--foreground);
    font-weight: var(--full-button-font-weight);
    font-size: var(--text-element);
    line-height: 1.625;
    font-family: var(--full-button-font-family);
    user-select: none;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;

    &:hover {
      background-color: var(--hover);
    }

    &:focus-visible {
      outline: 2px solid var(--focus) !important;
      outline-offset: 2px;
    }

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    .full-tag + & {
      --my-spacer: var(--space-4);
    }

    & + & {
      --my-spacer: var(--space-2);
    }
  }
</style>
