---
import type { ComponentProps, HTMLTag } from 'astro/types'
import Children from '../utility/Children.astro'
import Tag from '../utility/Tag.astro'

type Props<As extends HTMLTag = 'span'> = ComponentProps<typeof Tag<As>> &
  ComponentProps<typeof Children> & {
    variant?: 'solid' | 'soft' | 'surface' | 'outline'
  }

const { as = 'span', variant = 'primary', ...rest } = Astro.props
---

<Tag
  class:list={['full-badge']}
  {variant}
  {as}
  {...rest}
>
  <slot name="before" />
  <Children {...rest} />
  <slot />
</Tag>

<style is:global>
  .full-badge {
    display: inline-flex;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    vertical-align: top;
    gap: var(--full-space-2);
    transition: var(--full-transition);
    outline: none !important;
    border: 1px solid var(--full-color-border);
    border-radius: var(--radius-1);
    background-color: var(--full-color-background);
    padding: 0 var(--element-1);
    min-width: var(--element-2);
    height: var(--element-2);
    color: var(--full-color-foreground);
    font-size: var(--full-text-1);
    font: var(--full-text-1);
    user-select: none;
    text-align: center;
    text-decoration: none;
    white-space: nowrap;

    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      pointer-events: none;
    }

    &:focus-visible {
      outline: 2px solid var(--color-8);
      outline-offset: 2px;
    }

    &.solid,
    &.subtle,
    &.outline,
    &.surface {
      box-shadow: inset 0 0 0 var(--border-width) var(--badge-border);
      background-color: var(--badge-background);
      color: var(--badge-color) !important;

      /* &:hover {
        box-shadow: inset 0 0 0 var(--border-width)
          var(--badge-border-hover, var(--badge-border));
        background-color: var(
          --badge-background-hover,
          var(--badge-background)
        );
      } */

      /* &:active {
        background-color: var(
          --badge-background-active,
          var(--badge-background-hover, var(--badge-background))
        );
      } */

      &.contrast {
        --badge-color: var(--color-12);
      }
    }

    &.solid {
      --badge-background: var(--color-9);
      --badge-background-hover: var(--color-10);
      --badge-color: var(--color-fg); /* TODO */

      &.contrast {
        --badge-background: var(--color-12);
        --badge-background-hover: var(--color-12);
        --badge-color: var(--color-1);
      }
    }

    &.subtle {
      --badge-background: var(--color-3);
      --badge-background-hover: var(--color-4);
      --badge-background-active: var(--color-5);
      --badge-color: var(--color-11);
    }

    &.surface {
      --badge-background: var(--color-2);
      --badge-background-hover: var(--color-3);
      --badge-background-active: var(--color-4);
      --badge-color: var(--color-11);
      --badge-border: var(--color-a7); /* TODO */
      --badge-border-hover: var(--color-a8); /* TODO */
    }

    &.outline {
      --badge-background-hover: var(--color-2);
      --badge-background-active: var(--color-3);
      --badge-color: var(--color-11);
      --badge-border: var(--color-a7); /* TODO */
      --badge-border-hover: var(--color-a8); /* TODO */
    }
  }
</style>
