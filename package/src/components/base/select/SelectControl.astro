---
import type { ComponentProps, HTMLAttributes } from 'astro/types'
import Component from '../../_Component.astro'
import SelectOption from '../select/SelectOption.astro'
import SelectPlaceholder from '../select/SelectPlaceholder.astro'

type Props = HTMLAttributes<'select'> & {
  placeholder?:
    | ComponentProps<typeof SelectPlaceholder>
    | ComponentProps<typeof SelectPlaceholder>['text']
  options?: (
    | ComponentProps<typeof SelectOption>
    | ComponentProps<typeof SelectOption>['text']
  )[]
}

const { placeholder, options, ...rest } = Astro.props
---

<Component
  class:list={['select-control']}
  as="select"
  {...rest}
>
  <SelectPlaceholder
    {...typeof placeholder === 'string' ? { text: placeholder } : placeholder}
  />
  {
    options?.map((option: any) => (
      <SelectOption
        {...(typeof option === 'string' ? { text: option } : option)}
      />
    ))
  }
  <slot />
</Component>

<style is:global lang="scss">
  @import '../../../css/utils.scss';

  @include component('select-control') {
    display: flex;
    position: relative;
    align-items: center;
    appearance: none;
    appearance: none;
    outline: none;
    box-shadow: inset 0 0 0 var(--border-width) var(--border-outline);
    border: 0px;
    border-radius: var(--radius-1);
    background-color: var(--input-background);
    padding: var(--element-2);
    width: 100%;
    min-width: var(--element-2);
    height: calc(var(--text-label) + 2 * var(--element-3));
    color: var(--foreground);
    font-weight: var(--font-weight);
    font-size: var(--text-label);
    line-height: 1.25;
    font-family: var(--font-family);

    &:hover {
      outline: none;
      box-shadow: inset 0 0 0 1px var(--border-hover);
    }

    &:focus {
      outline: none;
      box-shadow: inset 0 0 0 3px var(--border-hover);
    }

    &:disabled {
      opacity: 50%;
      cursor: not-allowed;
      pointer-events: none;
    }
  }
</style>
