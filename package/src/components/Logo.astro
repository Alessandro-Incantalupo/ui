---
// import type { ComponentProps } from 'astro/types'
// import { macromorphic, type Endomorphic } from '../utils'
// import Image from './Image.astro'
// import Tag from './Tag.astro'

// interface Props
//   extends Endomorphic<Props, 'logo', ComponentProps<typeof Image>['image']>,
//     ComponentProps<typeof Tag>,
//     ComponentProps<typeof Image> {}

import { z } from 'astro:content'
import { macromorphic } from '../utils'
import Image, { zImage } from './Image.astro'
import Tag, { zTag } from './Tag.astro'

export const zLogo = zTag.extend({
  logo: zImage,
})

type Props = z.infer<typeof zLogo>

const { as = 'a', ...rest } = macromorphic(Astro.props, 'logo')
---

<Tag
  class="logo"
  href="/"
  {as}
  {...rest}
>
  <Image {...rest} />
  <slot />
</Tag>

<style is:global>
  .logo {
    .image {
      display: block !important;
      width: auto !important;
      height: var(--space-5) !important;
      object-fit: contain !important;
      color: var(--hue12) !important;
    }
  }
</style>
