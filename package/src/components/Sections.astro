---
// TODO: convert naar zod
import type { ComponentProps } from 'astro/types'
import { macromorphic, sortByIndex, type Endomorphic } from '../utils'
import Section from './Section.astro'
import Tag from './Tag.astro'

interface Props
  extends Endomorphic<Props, 'sections', ComponentProps<typeof Section>[]>,
    ComponentProps<typeof Tag> {
  index?: number
}

const { as = 'main', sections, ...rest } = macromorphic(Astro.props, 'sections')

const sorted = sortByIndex(sections)
// const indexed = sections?.map((section, index) => ({ index, ...section }))
// const sorted = indexed?.sort((a, b) => {
//   const index = (i: number) => (i < 0 ? indexed.length + 1 + i : i)
//   return index(a.index) - index(b.index)
// })
---

<Tag
  class="sections"
  {as}
  {...rest}
>
  <slot name="before" />
  {sorted?.map((section) => <Section {...section} />)}
  <slot name="after" />
</Tag>

<style is:global>
  .sections {
    display: flex;
    flex-direction: column;
  }
</style>
