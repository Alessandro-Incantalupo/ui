---
import type { ComponentProps } from 'astro/types'
import { buildProps, sortByIndex, type BuildProps } from '../utils'
import Section from './Section.astro'
import Tag from './Tag.astro'

type Index = {
  index?: number
}

interface Base {
  sections?: (ComponentProps<typeof Section> & Index)[] | null
}

type Props = BuildProps<Base, 'sections'>
const props = buildProps(Astro, 'sections')

let { as, sections, class: className, ...rest } = props
const sorted = sortByIndex(sections)

// const indexed = sections?.map((section, index) => ({ index, ...section }))
// const sorted = indexed?.sort((a, b) => {
//   const index = (i: number) => (i < 0 ? indexed.length + 1 + i : i)
//   return index(a.index) - index(b.index)
// })
---

<Tag
  {as}
  class={className}
  {...rest}
>
  {sorted?.map((section) => <Section {...section} />)}
</Tag>

<style is:global>
  .sections {
    display: flex;
    flex-direction: column;
  }
</style>
