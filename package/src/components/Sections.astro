---
// TODO: convert naar zod
import { z } from 'astro:content'
import { morph } from '../utils'
import Section, { macro as sectionSchema } from './Section.astro'
import Tag from './Tag.astro'

type Props = z.infer<typeof macro>

export const { macro, meso, micro } = morph('sections', {
  section: sectionSchema.shape.section,
  _section: sectionSchema.shape._section,
  sections: z.array(sectionSchema.shape.section).nullish(),
})

const { as = 'main', sections, section, _section, ...rest } = meso(Astro.props)

// const sorted = sortByIndex(sections)
// const indexed = sections?.map((section, index) => ({ index, ...section }))
// const sorted = indexed?.sort((a, b) => {
//   const index = (i: number) => (i < 0 ? indexed.length + 1 + i : i)
//   return index(a.index) - index(b.index)
// })
---

<Tag
  class="sections"
  {as}
  {...rest}
>
  <slot name="before" />
  {
    sections?.map((item) => (
      <Section
        {_section}
        {section}
        {...item}
      />
    ))
  }
  <slot name="after" />
</Tag>

<style is:global>
  .sections {
    display: flex;
    flex-direction: column;
  }
</style>
