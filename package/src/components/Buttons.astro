---
import type { ComponentProps } from 'astro/types'
import {
  endomorphic,
  getChildProps,
  sortByIndex,
  type Endomorphic,
} from '../utils'
import Button from './Button.astro'
import Tag from './Tag.astro'

interface Props
  extends Endomorphic<Props, 'buttons', ComponentProps<typeof Button>[]>,
    ComponentProps<typeof Tag>,
    Pick<ComponentProps<typeof Button>, 'button' | '_button'> {
  index?: number | null
}

const { buttons, ...rest } = endomorphic(Astro.props, 'buttons')
const child = getChildProps(rest)

const look: {
  [key: number]: 'solid' | 'soft' | 'ghost'
} = {
  0: 'solid',
  1: 'soft',
  2: 'ghost',
}

const sorted = sortByIndex(buttons)
---

<Tag
  class="buttons"
  {...rest}
>
  {
    sorted?.map((button, i) => (
      <Button
        look={look[i]}
        {button}
        {...child}
      />
    ))
  }
  <slot />
</Tag>

<style is:global>
  .buttons {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-2);
  }
</style>
