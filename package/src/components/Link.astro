---
import type { ComponentProps } from 'astro/types'
import { buildProps, getChildProps, type BuildProps } from '../utils'
import Icon from './Icon.astro'
import Tag from './Tag.astro'

// type Props<As extends HTMLTag = 'a'> = BuildProps<
//   'link',
//   ComponentProps<typeof Tag<As>> &
//     Pick<ComponentProps<typeof Icon>, 'icon' | '_icon'> & {
//       link?: string | null
//       contrast?: boolean | null
//     }
// >

interface Props
  extends BuildProps<'link', Props, string | null>,
    ComponentProps<typeof Tag>,
    Pick<ComponentProps<typeof Icon>, 'icon' | '_icon'> {
  contrast?: boolean | null
}

const { as = 'a', link, ...rest } = buildProps('link', Astro.props)
const child = getChildProps(rest)
---

<Tag
  class:list={['link']}
  {as}
  {...rest}
>
  <Fragment set:html={link} />
  <slot />
  <Icon {...child} />
</Tag>

<style is:global>
  .link {
    display: inline-flex;
    flex-wrap: wrap;
    align-items: center;
    gap: var(--space-2);
    transition: var(--transition);
    color: var(--hue11);
    font: var(--font);
    font-size: var(--text-2);
    text-decoration: none;
    text-decoration-color: var(--hue8);
    white-space: nowrap;

    &:hover {
      color: var(--hue12);
      text-decoration: underline;
      text-decoration-color: var(--hue8);
    }

    &.contrast {
      color: var(--hue12);

      &:hover {
        color: var(--hue11);
      }
    }
  }
</style>
