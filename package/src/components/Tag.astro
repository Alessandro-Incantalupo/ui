---
import type { HTMLTag, Polymorphic } from 'astro/types'
import { htmlElementAttributes } from 'html-element-attributes'

type Props<As extends HTMLTag = 'div', Rest extends {} = {}> = Omit<
  Polymorphic<{
    as: As
  }>,
  'slot'
> & {
  child?: boolean
  compact?: boolean | null
  contrast?: boolean | null
  scheme?: 'light' | 'dark' | null
  color?: 'base' | 'accent' | null
  size?: 'small' | 'medium' | 'large' | null
} & Rest

const {
  as: As = 'div',
  child,
  align,
  layout,
  color,
  scheme,
  size,
  look,
  order,
  frame,
  compact,
  contrast,
  ...rest
} = Astro.props

const slot = await Astro.slots.render('default')
const hasContent = slot?.trim().length > 0

let attributes = Object.fromEntries(
  Object.entries(rest).filter(
    ([key]) =>
      (htmlElementAttributes['*'].includes(key) ||
        htmlElementAttributes[As]?.includes(key) ||
        key.startsWith('data-') ||
        key.startsWith('aria-')) &&
      key !== 'title'
  )
)

if (child) attributes = {}
---

{
  hasContent && (
    <As
      class:list={
        !child
          ? [
              {
                compact,
                contrast,
              },
              color ? `hue-${color}` : '',
              scheme,
              size,
              // sometimes
              align,
              layout,
              scheme,
              size,
              look,
              order,
              frame,
            ]
          : ''
      }
      {...attributes}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
