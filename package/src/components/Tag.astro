---
import { z } from 'astro:content'
import { tags } from '../utils'

export const zTag = z.object({
  as: tags.default('div'),
  if: z.union([z.string(), z.literal(true)]).nullish(),
  class: z.string().nullish(),
  color: z.string().nullish(),
  scheme: z.string().nullish(),
  contrast: z.boolean().nullish(),
  size: z.string().nullish(),
  compact: z.boolean().nullish(),
})

type Props = z.infer<typeof zTag>

const {
  as: As,
  if: If,
  color,
  scheme,
  contrast,
  size,
  compact,
  ...rest
} = zTag.parse(Astro.props)

const slot = await Astro.slots.render('default')
const hasContent = slot?.trim().length > 0
const hasProp = If === true || (If && If in rest)
---

{
  (hasProp || hasContent) && (
    <As
      class:list={[
        { compact, contrast },
        color ? `hue-${color}` : '',
        size ? `size-${size}` : '',
        scheme,
        size,
      ]}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
