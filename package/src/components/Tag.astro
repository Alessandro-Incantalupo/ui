---

import { z } from 'astro:content'
import { zElements } from '../utils'
import { morph } from '../utils'
import Tag from './Tag.astro'

type Props = z.infer<typeof macro>
  
export const { macro, meso, micro } = morph('tag', {
  // element
  as: zElements.optional(),
  if: z.union([z.string(), z.literal(true)]).nullish(),
  // theme
  color: z.string().nullish(),
  scheme: z.string().nullish(),
  contrast: z.boolean().nullish(),
  size: z.string().nullish(),
  compact: z.boolean().nullish(),
  // global
  class: z.string().nullish(),
  id: z.string().nullish(),
  onclick: z.string().nullish(),
  // specific
  src: z.string().nullish(),
  alt: z.string().nullish(),
  sizes: z.string().nullish(),
  // loading: z.string().nullish(),
})

const {
  as: As = 'div',
  if: If,
  color,
  scheme,
  contrast,
  size,
  compact,
  ...rest
} = meso(Astro.props)

// const prefixAttributes = z.record(
//   z
//     .string()
//     .refine((key) =>
//       ['on', 'data-', 'aria-'].some((prefix) => key.startsWith(prefix))
//     ),
//   z.string().nullish()
// ) as z.ZodType<{
//   [Key in `${'on' | 'data-' | 'aria-'}${string}`]: string | null | undefined
// }>

const slot = await Astro.slots.render('default')
const hasContent = slot?.trim().length > 0
const hasProp = If === true || (If && If in rest)
---

{
  (hasProp || hasContent) && (
    <As
      class:list={[
        { compact, contrast },
        color ? `hue-${color}` : '',
        size ? `size-${size}` : '',
        scheme,
      ]}
      {...rest}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
