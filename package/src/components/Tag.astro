---
import type { HTMLAttributes, HTMLTag } from 'astro/types'
import { htmlElementAttributes } from 'html-element-attributes'

type Props<As extends HTMLTag> =
  //   Omit<
  //   Polymorphic<{
  //     as: As
  //   }>,
  //   'slot' | 'title'
  // > &
  {
    as?: As
    class?: HTMLAttributes<HTMLTag>['class']
    id?: HTMLAttributes<HTMLTag>['id']
    if?: string | null
    compact?: boolean | null
    scheme?: 'light' | 'dark' | null
    color?: 'base' | 'accent' | null
    size?: 'small' | 'medium' | 'large' | null
    // temp
    rows?: HTMLAttributes<'textarea'>['rows']
    loading?: HTMLAttributes<'img'>['loading']
    alt?: HTMLAttributes<'img'>['alt']
    src?: HTMLAttributes<'img'>['src']
    method?: HTMLAttributes<'form'>['method']
    type?: HTMLAttributes<'button'>['type']
    for?: HTMLAttributes<'label'>['for']
    href?: HTMLAttributes<'a'>['href']
    sizes?: HTMLAttributes<'img'>['sizes']
  }

const {
  as: As = 'div',
  if: ifProp,
  compact,
  scheme,
  color,
  size,
  ...rest
} = Astro.props

const attributes = Object.fromEntries(
  Object.entries(rest).filter(
    ([key]) =>
      (Object.values(htmlElementAttributes).flat().includes(key) ||
        key.startsWith('data-') ||
        key.startsWith('aria-')) &&
      key !== 'title'
  )
)

const slot = await Astro.slots.render('default')
const hasContent = slot?.trim().length > 0
const hasProp = ifProp === true || Astro.props[ifProp]
---

{
  (hasProp || hasContent) && (
    <As
      class:list={[color ? `hue-${color}` : '', scheme, size, { compact }]}
      {...attributes}
    >
      <Fragment set:html={slot} />
    </As>
  )
}
