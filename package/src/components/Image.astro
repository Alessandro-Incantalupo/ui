---
import type { ComponentProps } from 'astro/types'
import { endomorphic, unslugify, type Endomorphic } from '../utils'
import Tag from './Tag.astro'

interface Props
  extends Endomorphic<Props, 'image', string>,
    ComponentProps<typeof Tag> {
  loading?: 'eager' | 'lazy'
  alt?: string
  sizes?: {
    base: string
    sm?: string
    md?: string
    lg?: string
    xl?: string
    '2xl'?: string
  }
  position?: 'background' | null
  frame?: 'fill' | 'panel' | 'screen' | null
}

const {
  as = 'img',
  loading = 'lazy',
  alt = '',
  sizes = {
    base: '100vw',
  },
  position,
  frame,
  image,
  ...rest
} = endomorphic(Astro.props, 'image')

// function getSrc() {
//   if (src?.startsWith('http')) return src
//   // TODO: add eager import
//   const images = import.meta.glob('/src/assets/**/*.{jpeg,jpg,png,webp,gif}', {
//     eager: true,
//   })
//   const path = ('/src/assets/' + src).replace('//', '/')
//   const image = images[path]
//   if (!image) console.warn(`Image not found: ${path}`)
//   else return image
// }

function getAlt(): string {
  if (alt) return alt
  const filename = image?.split('/').pop()
  const slug = filename && filename.split('.')[0]
  const unslugged = slug && unslugify(slug)
  return unslugged || ''
}

function getSizes() {
  const mapped = Object.entries(sizes).map(([key, value]) => {
    if (key === 'base') return value
    if (key === 'sm') return `(min-width: 640px) ${value}`
    if (key === 'md') return `(min-width: 768px) ${value}`
    if (key === 'lg') return `(min-width: 1024px) ${value}`
    if (key === 'xl') return `(min-width: 1280px) ${value}`
    if (key === '2xl') return `(min-width: 1536px) ${value}`
  })
  const joined = mapped.join(', ')
  return joined
}
---

<Tag
  {as}
  {...rest}
  if="src"
  src={image}
  alt={getAlt()}
  sizes={getSizes()}
  class:list={['image', position, frame]}
  {loading}
/>

<style is:global>
  .mask {
    -webkit-mask-image: linear-gradient(to top, transparent 0%, black 30%);
    mask-image: linear-gradient(to top, transparent 0%, black 30%);
  }
  .mask-lg {
    -webkit-mask-image: linear-gradient(to top, transparent 0%, black 100%);
    mask-image: linear-gradient(to top, transparent 0%, black 100%);
  }

  .image {
    display: block;
    transition: var(--transition);
    border-radius: var(--radius-1);
    width: 100%;
    height: auto;
    object-fit: cover;

    &.background {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      order: 1;

      /* TODO manier fixen zodat dit met custom classes kan */
      opacity: 50%;
      border-radius: 0;
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &.cover {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    &.panel {
      height: 100%;
      object-fit: cover;
    }
  }
</style>
