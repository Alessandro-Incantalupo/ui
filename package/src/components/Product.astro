---
import type { ComponentProps } from 'astro/types'
import { buildProps, type BuildProps } from '../utils'
import Button from './Button.astro'
import type Description from './Description.astro'
import Fields from './Fields.astro'
import type Image from './Image.astro'
import Price from './Price.astro'
import Tag from './Tag.astro'
import type Title from './Title.astro'

interface Base
  extends Pick<ComponentProps<typeof Price>, 'price' | '_price'>,
    Pick<ComponentProps<typeof Button>, 'button' | '_button'>,
    Pick<ComponentProps<typeof Title>, 'title' | '_title'>,
    Pick<ComponentProps<typeof Image>, 'image' | '_image'>,
    Pick<ComponentProps<typeof Description>, 'description' | '_description'>,
    Pick<ComponentProps<typeof Fields>, 'fields' | '_fields'> {}

type Props = BuildProps<Base, 'product'>
const props = buildProps(Astro, 'product')

const {
  price,
  _price,
  fields,
  _fields,
  button,
  _button,
  title,
  image,
  description,
  ...rest
} = props

const getImage = () => {
  if (typeof image !== 'string') return 'https://picsum.photos/1/1'
  if (image.startsWith('http')) return image
  else return Astro.url.origin + image
}
---

<Tag
  {...rest}
  as="div"
>
  <Fields
    {fields}
    {_fields}
  />
  <Price
    {price}
    {_price}
  />
  <Button
    class="fullcart-add hue-accent"
    data-id={Astro.url.pathname}
    data-price={price}
    data-title={title}
    data-description={description}
    data-url={Astro.url.href}
    data-image={getImage()}
    {button}
    {_button}
  />
</Tag>

<script>
  const productForm = document.querySelector('div.product')
  const selectElements = productForm.querySelectorAll('select')
  const productButton = productForm.querySelector('.button')
  const selectArray = Array.from(selectElements)
  const priceElement = productForm.querySelector('.price')
  const basePrice = parseInt(priceElement.textContent.replace('€', ''))
  const baseId = productButton.getAttribute('data-id')

  let price = basePrice

  function run() {
    const values = selectArray.map((select) => select.value)
    const priceChanges = values.map((value) => {
      const option = productForm.querySelector(`option[value="${value}"]`)
      const priceChange = option.getAttribute('data-price-change')
      console.log('pricechange', priceChange)
      return parseInt(option.getAttribute('data-price-change'))
    })
    price = basePrice + priceChanges.reduce((a, b) => a + b, 0)
    priceElement.textContent = `€${price.toFixed(2).replace('.', ',')}` // TODO hij rond nu altijd af op ,00
    productButton.setAttribute('data-price', price)
    // TODO update the id, so that it is no duplicate
    productButton.setAttribute('data-id', baseId + price)
  }

  selectElements.forEach((select) => {
    select.addEventListener('change', (e) => {
      run()
    })
  })
</script>

<style is:global>
  .product {
    display: flex;
    row-gap: var(--space-3);
    flex-direction: column;
  }
</style>
